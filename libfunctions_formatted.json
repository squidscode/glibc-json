{
  "functions": {
    "a64l": {
      "return type": "long int",
      "arguments": [
        "const char *string"
      ],
      "description": "stdlib.h (XPG):  Encode Binary Data."
    },
    "abort": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (ISO):  Aborting a Program."
    },
    "abs": {
      "return type": "int",
      "arguments": [
        "int number"
      ],
      "description": "stdlib.h (ISO):  Absolute Value."
    },
    "accept": {
      "return type": "int",
      "arguments": [
        "int socket",
        "struct sockaddr *addr",
        "socklen_t *length_ptr"
      ],
      "description": "sys/socket.h (BSD):  Accepting Connections."
    },
    "access": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "int how"
      ],
      "description": "unistd.h (POSIX.1):  Testing Permission to Access a File."
    },
    "acos": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "acosf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "acosh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "acoshf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "acoshl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "acosl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "addmntent": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const struct mntent *mnt"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "adjtime": {
      "return type": "int",
      "arguments": [
        "const struct timeval *delta",
        "struct timeval *olddelta"
      ],
      "description": "sys/time.h (BSD):  High-Resolution Calendar."
    },
    "adjtimex": {
      "return type": "int",
      "arguments": [
        "struct timex *timex"
      ],
      "description": "sys/timex.h (GNU):  High-Resolution Calendar."
    },
    "aio_cancel": {
      "return type": "int",
      "arguments": [
        "int fildes",
        "struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Cancellation of AIO Operations."
    },
    "aio_cancel64": {
      "return type": "int",
      "arguments": [
        "int fildes",
        "struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Cancellation of AIO Operations."
    },
    "aio_error": {
      "return type": "int",
      "arguments": [
        "const struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Getting the Status of AIO Operations."
    },
    "aio_error64": {
      "return type": "int",
      "arguments": [
        "const struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Getting the Status of AIO Operations."
    },
    "aio_fsync": {
      "return type": "int",
      "arguments": [
        "int op",
        "struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Getting into a Consistent State."
    },
    "aio_fsync64": {
      "return type": "int",
      "arguments": [
        "int op",
        "struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Getting into a Consistent State."
    },
    "aio_init": {
      "return type": "void",
      "arguments": [
        "const struct aioinit *init"
      ],
      "description": "aio.h (GNU):  How to optimize the AIO implementation."
    },
    "aio_read": {
      "return type": "int",
      "arguments": [
        "struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Asynchronous Read and Write Operations."
    },
    "aio_read64": {
      "return type": "int",
      "arguments": [
        "struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Asynchronous Read and Write Operations."
    },
    "aio_return": {
      "return type": "ssize_t",
      "arguments": [
        "struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Getting the Status of AIO Operations."
    },
    "aio_return64": {
      "return type": "ssize_t",
      "arguments": [
        "struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Getting the Status of AIO Operations."
    },
    "aio_suspend": {
      "return type": "int",
      "arguments": [
        "const struct aiocb *const list[]",
        "int nent",
        "const struct timespec *timeout"
      ],
      "description": "aio.h (POSIX.1b):  Getting into a Consistent State."
    },
    "aio_suspend64": {
      "return type": "int",
      "arguments": [
        "const struct aiocb64 *const list[]",
        "int nent",
        "const struct timespec *timeout"
      ],
      "description": "aio.h (Unix98):  Getting into a Consistent State."
    },
    "aio_write": {
      "return type": "int",
      "arguments": [
        "struct aiocb *aiocbp"
      ],
      "description": "aio.h (POSIX.1b):  Asynchronous Read and Write Operations."
    },
    "aio_write64": {
      "return type": "int",
      "arguments": [
        "struct aiocb64 *aiocbp"
      ],
      "description": "aio.h (Unix98):  Asynchronous Read and Write Operations."
    },
    "alarm": {
      "return type": "unsigned int",
      "arguments": [
        "unsigned int seconds"
      ],
      "description": "unistd.h (POSIX.1):  Setting an Alarm."
    },
    "aligned_alloc": {
      "return type": "void *",
      "arguments": [
        "size_t alignment",
        "size_t size"
      ],
      "description": "stdlib.h (stdlib.h):  Allocating Aligned Memory Blocks."
    },
    "alloca": {
      "return type": "void *",
      "arguments": [
        "size_t size"
      ],
      "description": "stdlib.h (GNU, BSD):  Automatic Storage with Variable Size."
    },
    "alphasort": {
      "return type": "int",
      "arguments": [
        "const struct dirent **a",
        "const struct dirent **b"
      ],
      "description": "dirent.h (BSD/SVID):  Scanning the Content of a Directory."
    },
    "alphasort64": {
      "return type": "int",
      "arguments": [
        "const struct dirent64 **a",
        "const struct dirent **b"
      ],
      "description": "dirent.h (GNU):  Scanning the Content of a Directory."
    },
    "argp_error": {
      "return type": "void",
      "arguments": [
        "const struct argp_state *state",
        "const char *fmt",
        "…"
      ],
      "description": "argp.h (GNU):  Functions For Use in Argp Parsers."
    },
    "argp_failure": {
      "return type": "void",
      "arguments": [
        "const struct argp_state *state",
        "int status",
        "int errnum",
        "const char *fmt",
        "…"
      ],
      "description": "argp.h (GNU):  Functions For Use in Argp Parsers."
    },
    "argp_help": {
      "return type": "void",
      "arguments": [
        "const struct argp *argp",
        "FILE *stream",
        "unsigned flags",
        "char *name"
      ],
      "description": "argp.h (GNU):  The argp_help Function."
    },
    "argp_parse": {
      "return type": "error_t",
      "arguments": [
        "const struct argp *argp",
        "int argc",
        "char **argv",
        "unsigned flags",
        "int *arg_index",
        "void *input"
      ],
      "description": "argp.h (GNU):  Suboptions."
    },
    "argp_state_help": {
      "return type": "void",
      "arguments": [
        "const struct argp_state *state",
        "FILE *stream",
        "unsigned flags"
      ],
      "description": "argp.h (GNU):  Functions For Use in Argp Parsers."
    },
    "argp_usage": {
      "return type": "void",
      "arguments": [
        "const struct argp_state *state"
      ],
      "description": "argp.h (GNU):  Functions For Use in Argp Parsers."
    },
    "argz_add": {
      "return type": "error_t",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "const char *str"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_add_sep": {
      "return type": "error_t",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "const char *str",
        "int delim"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_append": {
      "return type": "error_t",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "const char *buf",
        "size_t buf_len"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_count": {
      "return type": "size_t",
      "arguments": [
        "const char *argz",
        "size_t arg_len"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_create": {
      "return type": "error_t",
      "arguments": [
        "char *const argv[]",
        "char **argz",
        "size_t *argz_len"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_create_sep": {
      "return type": "error_t",
      "arguments": [
        "const char *string",
        "int sep",
        "char **argz",
        "size_t *argz_len"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_delete": {
      "return type": "void",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "char *entry"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_extract": {
      "return type": "void",
      "arguments": [
        "const char *argz",
        "size_t argz_len",
        "char **argv"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_insert": {
      "return type": "error_t",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "char *before",
        "const char *entry"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_next": {
      "return type": "char *",
      "arguments": [
        "const char *argz",
        "size_t argz_len",
        "const char *entry"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_replace": {
      "return type": "error_t",
      "arguments": [
        "char **argz",
        "size_t *argz_len",
        "const char *str",
        "const char *with",
        "unsigned *replace_count"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "argz_stringify": {
      "return type": "void",
      "arguments": [
        "char *argz",
        "size_t len",
        "int sep"
      ],
      "description": "argz.h (GNU):  Argz Functions."
    },
    "asctime": {
      "return type": "char *",
      "arguments": [
        "const struct tm *brokentime"
      ],
      "description": "time.h (ISO):  Formatting Calendar Time."
    },
    "asctime_r": {
      "return type": "char *",
      "arguments": [
        "const struct tm *brokentime",
        "char *buffer"
      ],
      "description": "time.h (POSIX.1c):  Formatting Calendar Time."
    },
    "asin": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "asinf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "asinh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "asinhf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "asinhl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "asinl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "asprintf": {
      "return type": "int",
      "arguments": [
        "char **ptr",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (GNU):  Dynamically Allocating Formatted Output."
    },
    "assert": {
      "return type": "void",
      "arguments": [
        "int expression"
      ],
      "description": "assert.h (ISO):  Explicitly Checking Internal Consistency."
    },
    "assert_perror": {
      "return type": "void",
      "arguments": [
        "int errnum"
      ],
      "description": "assert.h (GNU):  Explicitly Checking Internal Consistency."
    },
    "atan": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "atan2": {
      "return type": "double",
      "arguments": [
        "double y",
        "double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "atan2f": {
      "return type": "float",
      "arguments": [
        "float y",
        "float x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "atan2l": {
      "return type": "long double",
      "arguments": [
        "long double y",
        "long double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "atanf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "atanh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "atanhf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "atanhl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "atanl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Inverse Trigonometric Functions."
    },
    "(*function)": {
      "return type": "int on_exit (void",
      "arguments": [
        "void (*function)(int status",
        "void *arg)",
        "void *arg"
      ],
      "description": "stdlib.h (SunOS):  Cleanups on Exit."
    },
    "atof": {
      "return type": "double",
      "arguments": [
        "const char *string"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "atoi": {
      "return type": "int",
      "arguments": [
        "const char *string"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "atol": {
      "return type": "long int",
      "arguments": [
        "const char *string"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "atoll": {
      "return type": "long long int",
      "arguments": [
        "const char *string"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "backtrace": {
      "return type": "int",
      "arguments": [
        "void **buffer",
        "int size"
      ],
      "description": "execinfo.h (GNU):  Backtraces."
    },
    "backtrace_symbols": {
      "return type": "char **",
      "arguments": [
        "void *const *buffer",
        "int size"
      ],
      "description": "execinfo.h (GNU):  Backtraces."
    },
    "backtrace_symbols_fd": {
      "return type": "void",
      "arguments": [
        "void *const *buffer",
        "int size",
        "int fd"
      ],
      "description": "execinfo.h (GNU):  Backtraces."
    },
    "basename": {
      "return type": "char *",
      "arguments": [
        "const char *filename"
      ],
      "description": "string.h (GNU):  Finding Tokens in a String."
    },
    "bcmp": {
      "return type": "int",
      "arguments": [
        "const void *a1",
        "const void *a2",
        "size_t size"
      ],
      "description": "string.h (BSD):  String/Array Comparison."
    },
    "bcopy": {
      "return type": "void",
      "arguments": [
        "const void *from",
        "void *to",
        "size_t size"
      ],
      "description": "string.h (BSD):  Copying and Concatenation."
    },
    "bind": {
      "return type": "int",
      "arguments": [
        "int socket",
        "struct sockaddr *addr",
        "socklen_t length"
      ],
      "description": "sys/socket.h (BSD):  Setting the Address of a Socket."
    },
    "bindtextdomain": {
      "return type": "char *",
      "arguments": [
        "const char *domainname",
        "const char *dirname"
      ],
      "description": "libintl.h (GNU):  How to determine which catalog to be used."
    },
    "bind_textdomain_codeset": {
      "return type": "char *",
      "arguments": [
        "const char *domainname",
        "const char *codeset"
      ],
      "description": "libintl.h (GNU):  How to specify the output character set gettext uses."
    },
    "brk": {
      "return type": "int",
      "arguments": [
        "void *addr"
      ],
      "description": "unistd.h (BSD):  Resizing the Data Segment."
    },
    "bsearch": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "const void *array",
        "size_t count",
        "size_t size",
        "comparison_fn_t compare"
      ],
      "description": "stdlib.h (ISO):  Array Search Function."
    },
    "btowc": {
      "return type": "wint_t",
      "arguments": [
        "int c"
      ],
      "description": "wchar.h (ISO):  Converting Single Characters."
    },
    "bzero": {
      "return type": "void",
      "arguments": [
        "void *block",
        "size_t size"
      ],
      "description": "string.h (BSD):  Copying and Concatenation."
    },
    "cabs": {
      "return type": "double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Absolute Value."
    },
    "cabsf": {
      "return type": "float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Absolute Value."
    },
    "cabsl": {
      "return type": "long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Absolute Value."
    },
    "cacos": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "cacosf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "cacosh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "cacoshf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "cacoshl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "cacosl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "calloc": {
      "return type": "void *",
      "arguments": [
        "size_t count",
        "size_t eltsize"
      ],
      "description": "malloc.h, stdlib.h (ISO):  Allocating Cleared Space."
    },
    "canonicalize_file_name": {
      "return type": "char *",
      "arguments": [
        "const char *name"
      ],
      "description": "stdlib.h (GNU):  Symbolic Links."
    },
    "carg": {
      "return type": "double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cargf": {
      "return type": "float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cargl": {
      "return type": "long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "casin": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "casinf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "casinh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "casinhf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "casinhl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "casinl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "catan": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "catanf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "catanh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "catanhf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "catanhl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "catanl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Inverse Trigonometric Functions."
    },
    "catopen": {
      "return type": "nl_catd",
      "arguments": [
        "const char *cat_name",
        "int flag"
      ],
      "description": "nl_types.h (X/Open):  The catgets function family."
    },
    "cbc_crypt": {
      "return type": "int",
      "arguments": [
        "char *key",
        "char *blocks",
        "unsigned len",
        "unsigned mode",
        "char *ivec"
      ],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "cbrt": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (BSD):  Exponentiation and Logarithms."
    },
    "cbrtf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (BSD):  Exponentiation and Logarithms."
    },
    "cbrtl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (BSD):  Exponentiation and Logarithms."
    },
    "ccos": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ccosf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ccosh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ccoshf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ccoshl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ccosl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ceil": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "ceilf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "ceill": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "cexp": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cexpf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cexpl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cfgetispeed": {
      "return type": "speed_t",
      "arguments": [
        "const struct termios *termios-p"
      ],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "cfgetospeed": {
      "return type": "speed_t",
      "arguments": [
        "const struct termios *termios-p"
      ],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "cfmakeraw": {
      "return type": "void",
      "arguments": [
        "struct termios *termios-p"
      ],
      "description": "termios.h (BSD):  Noncanonical Input."
    },
    "cfree": {
      "return type": "void",
      "arguments": [
        "void *ptr"
      ],
      "description": "stdlib.h (Sun):  Freeing Memory Allocated with malloc."
    },
    "cfsetispeed": {
      "return type": "int",
      "arguments": [
        "struct termios *termios-p",
        "speed_t speed"
      ],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "cfsetospeed": {
      "return type": "int",
      "arguments": [
        "struct termios *termios-p",
        "speed_t speed"
      ],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "cfsetspeed": {
      "return type": "int",
      "arguments": [
        "struct termios *termios-p",
        "speed_t speed"
      ],
      "description": "termios.h (BSD):  Line Speed."
    },
    "chdir": {
      "return type": "int",
      "arguments": [
        "const char *filename"
      ],
      "description": "unistd.h (POSIX.1):  Working Directory."
    },
    "chmod": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode"
      ],
      "description": "sys/stat.h (POSIX.1):  Assigning File Permissions."
    },
    "chown": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "uid_t owner",
        "gid_t group"
      ],
      "description": "unistd.h (POSIX.1):  File Owner."
    },
    "cimag": {
      "return type": "double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cimagf": {
      "return type": "float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cimagl": {
      "return type": "long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "clearenv": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (GNU):  Environment Access."
    },
    "clearerr": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Recovering from errors."
    },
    "clearerr_unlocked": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Recovering from errors."
    },
    "clock": {
      "return type": "clock_t",
      "arguments": [
        "void"
      ],
      "description": "time.h (ISO):  CPU Time Inquiry."
    },
    "clog": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "clog10": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (GNU):  Exponentiation and Logarithms."
    },
    "clog10f": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (GNU):  Exponentiation and Logarithms."
    },
    "clog10l": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (GNU):  Exponentiation and Logarithms."
    },
    "clogf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "clogl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "close": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "unistd.h (POSIX.1):  Opening and Closing Files."
    },
    "closedir": {
      "return type": "int",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (POSIX.1):  Reading and Closing a Directory Stream."
    },
    "closelog": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "syslog.h (BSD):  closelog."
    },
    "confstr": {
      "return type": "size_t",
      "arguments": [
        "int parameter",
        "char *buf",
        "size_t len"
      ],
      "description": "unistd.h (POSIX.2):  String-Valued Parameters."
    },
    "conj": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "conjf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "conjl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "connect": {
      "return type": "int",
      "arguments": [
        "int socket",
        "struct sockaddr *addr",
        "socklen_t length"
      ],
      "description": "sys/socket.h (BSD):  Making a Connection."
    },
    "copysign": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "copysignf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "copysignl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "cos": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "cosf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "cosh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "coshf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "coshl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "cosl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "cpow": {
      "return type": "complex double",
      "arguments": [
        "complex double base",
        "complex double power"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cpowf": {
      "return type": "complex float",
      "arguments": [
        "complex float base",
        "complex float power"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cpowl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double base",
        "complex long double power"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "cproj": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cprojf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "cprojl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "CPU_CLR": {
      "return type": "void",
      "arguments": [
        "int cpu",
        "cpu_set_t *set"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "CPU_ISSET": {
      "return type": "int",
      "arguments": [
        "int cpu",
        "const cpu_set_t *set"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "CPU_SET": {
      "return type": "void",
      "arguments": [
        "int cpu",
        "cpu_set_t *set"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "CPU_ZERO": {
      "return type": "void",
      "arguments": [
        "cpu_set_t *set"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "creal": {
      "return type": "double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "crealf": {
      "return type": "float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "creall": {
      "return type": "long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Projections, Conjugates, and Decomposing of Complex Numbers."
    },
    "creat": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode"
      ],
      "description": "fcntl.h (POSIX.1):  Opening and Closing Files."
    },
    "creat64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode"
      ],
      "description": "fcntl.h (Unix98):  Opening and Closing Files."
    },
    "crypt": {
      "return type": "char *",
      "arguments": [
        "const char *key",
        "const char *salt"
      ],
      "description": "crypt.h (BSD, SVID):  Encrypting Passwords."
    },
    "crypt_r": {
      "return type": "char *",
      "arguments": [
        "const char *key",
        "const char *salt",
        "struct crypt_data * data"
      ],
      "description": "crypt.h (GNU):  Encrypting Passwords."
    },
    "csin": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "csinf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "csinh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "csinhf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "csinhl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "csinl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "csqrt": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "csqrtf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "csqrtl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Exponentiation and Logarithms."
    },
    "ctan": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ctanf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ctanh": {
      "return type": "complex double",
      "arguments": [
        "complex double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ctanhf": {
      "return type": "complex float",
      "arguments": [
        "complex float z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ctanhl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Hyperbolic Functions."
    },
    "ctanl": {
      "return type": "complex long double",
      "arguments": [
        "complex long double z"
      ],
      "description": "complex.h (ISO):  Trigonometric Functions."
    },
    "ctermid": {
      "return type": "char *",
      "arguments": [
        "char *string"
      ],
      "description": "stdio.h (POSIX.1):  Identifying the Controlling Terminal."
    },
    "ctime": {
      "return type": "char *",
      "arguments": [
        "const time_t *time"
      ],
      "description": "time.h (ISO):  Formatting Calendar Time."
    },
    "ctime_r": {
      "return type": "char *",
      "arguments": [
        "const time_t *time",
        "char *buffer"
      ],
      "description": "time.h (POSIX.1c):  Formatting Calendar Time."
    },
    "cuserid": {
      "return type": "char *",
      "arguments": [
        "char *string"
      ],
      "description": "stdio.h (POSIX.1):  Identifying Who Logged In."
    },
    "dcgettext": {
      "return type": "char *",
      "arguments": [
        "const char *domainname",
        "const char *msgid",
        "int category"
      ],
      "description": "libintl.h (GNU):  What has to be done to translate a message?."
    },
    "dcngettext": {
      "return type": "char *",
      "arguments": [
        "const char *domain",
        "const char *msgid1",
        "const char *msgid2",
        "unsigned long int n",
        "int category"
      ],
      "description": "libintl.h (GNU):  Additional functions for more complicated situations."
    },
    "DES_FAILED": {
      "return type": "int",
      "arguments": [
        "int err"
      ],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "des_setparity": {
      "return type": "void",
      "arguments": [
        "char *key"
      ],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "dgettext": {
      "return type": "char *",
      "arguments": [
        "const char *domainname",
        "const char *msgid"
      ],
      "description": "libintl.h (GNU):  What has to be done to translate a message?."
    },
    "difftime": {
      "return type": "double",
      "arguments": [
        "time_t time1",
        "time_t time0"
      ],
      "description": "time.h (ISO):  Elapsed Time."
    },
    "dirfd": {
      "return type": "int",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (GNU):  Opening a Directory Stream."
    },
    "dirname": {
      "return type": "char *",
      "arguments": [
        "char *path"
      ],
      "description": "libgen.h (XPG):  Finding Tokens in a String."
    },
    "div": {
      "return type": "div_t",
      "arguments": [
        "int numerator",
        "int denominator"
      ],
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "dngettext": {
      "return type": "char *",
      "arguments": [
        "const char *domain",
        "const char *msgid1",
        "const char *msgid2",
        "unsigned long int n"
      ],
      "description": "libintl.h (GNU):  Additional functions for more complicated situations."
    },
    "drand48": {
      "return type": "double",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "drand48_r": {
      "return type": "int",
      "arguments": [
        "struct drand48_data *buffer",
        "double *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "drem": {
      "return type": "double",
      "arguments": [
        "double numerator",
        "double denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "dremf": {
      "return type": "float",
      "arguments": [
        "float numerator",
        "float denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "dreml": {
      "return type": "long double",
      "arguments": [
        "long double numerator",
        "long double denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "DTTOIF": {
      "return type": "mode_t",
      "arguments": [
        "int dtype"
      ],
      "description": "dirent.h (BSD):  Format of a Directory Entry."
    },
    "dup": {
      "return type": "int",
      "arguments": [
        "int old"
      ],
      "description": "unistd.h (POSIX.1):  Duplicating Descriptors."
    },
    "dup2": {
      "return type": "int",
      "arguments": [
        "int old",
        "int new"
      ],
      "description": "unistd.h (POSIX.1):  Duplicating Descriptors."
    },
    "ecb_crypt": {
      "return type": "int",
      "arguments": [
        "char *key",
        "char *blocks",
        "unsigned len",
        "unsigned mode"
      ],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "ecvt": {
      "return type": "char *",
      "arguments": [
        "double value",
        "int ndigit",
        "int *decpt",
        "int *neg"
      ],
      "description": "stdlib.h (SVID, Unix98):  Old-fashioned System V number-to-string functions."
    },
    "ecvt_r": {
      "return type": "int",
      "arguments": [
        "double value",
        "int ndigit",
        "int *decpt",
        "int *neg",
        "char *buf",
        "size_t len"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "encrypt": {
      "return type": "void",
      "arguments": [
        "char *block",
        "int edflag"
      ],
      "description": "crypt.h (BSD, SVID):  DES Encryption."
    },
    "encrypt_r": {
      "return type": "void",
      "arguments": [
        "char *block",
        "int edflag",
        "struct crypt_data * data"
      ],
      "description": "crypt.h (GNU):  DES Encryption."
    },
    "endfsent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "fstab.h (BSD):  The fstab file."
    },
    "endgrent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "grp.h (SVID, BSD):  Scanning the List of All Groups."
    },
    "endhostent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Host Names."
    },
    "endmntent": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "endnetent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Networks Database."
    },
    "endnetgrent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Looking up one Netgroup."
    },
    "endprotoent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "endpwent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "pwd.h (SVID, BSD):  Scanning the List of All Users."
    },
    "endservent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  The Services Database."
    },
    "endutent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "endutxent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "envz_add": {
      "return type": "error_t",
      "arguments": [
        "char **envz",
        "size_t *envz_len",
        "const char *name",
        "const char *value"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "envz_entry": {
      "return type": "char *",
      "arguments": [
        "const char *envz",
        "size_t envz_len",
        "const char *name"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "envz_get": {
      "return type": "char *",
      "arguments": [
        "const char *envz",
        "size_t envz_len",
        "const char *name"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "envz_merge": {
      "return type": "error_t",
      "arguments": [
        "char **envz",
        "size_t *envz_len",
        "const char *envz2",
        "size_t envz2_len",
        "int override"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "envz_remove": {
      "return type": "void",
      "arguments": [
        "char **envz",
        "size_t *envz_len",
        "const char *name"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "envz_strip": {
      "return type": "void",
      "arguments": [
        "char **envz",
        "size_t *envz_len"
      ],
      "description": "envz.h (GNU):  Envz Functions."
    },
    "erand48": {
      "return type": "double",
      "arguments": [
        "unsigned short int xsubi[3]"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "erand48_r": {
      "return type": "int",
      "arguments": [
        "unsigned short int xsubi[3]",
        "struct drand48_data *buffer",
        "double *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "erf": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "erfc": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "erfcf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "erfcl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "erff": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "erfl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "err": {
      "return type": "void",
      "arguments": [
        "int status",
        "const char *format",
        "…"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "error": {
      "return type": "void",
      "arguments": [
        "int status",
        "int errnum",
        "const char *format",
        "…"
      ],
      "description": "error.h (GNU):  Error Messages."
    },
    "error_at_line": {
      "return type": "void",
      "arguments": [
        "int status",
        "int errnum",
        "const char *fname",
        "unsigned int lineno",
        "const char *format",
        "…"
      ],
      "description": "error.h (GNU):  Error Messages."
    },
    "errx": {
      "return type": "void",
      "arguments": [
        "int status",
        "const char *format",
        "…"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "execl": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const char *arg0",
        "…"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "execle": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const char *arg0",
        "…",
        "char *const env[]"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "execlp": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const char *arg0",
        "…"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "execv": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "char *const argv[]"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "execve": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "char *const argv[]",
        "char *const env[]"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "execvp": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "char *const argv[]"
      ],
      "description": "unistd.h (POSIX.1):  Executing a File."
    },
    "_Exit": {
      "return type": "void",
      "arguments": [
        "int status"
      ],
      "description": "stdlib.h (ISO):  Termination Internals."
    },
    "_exit": {
      "return type": "void",
      "arguments": [
        "int status"
      ],
      "description": "unistd.h (POSIX.1):  Termination Internals."
    },
    "exit": {
      "return type": "void",
      "arguments": [
        "int status"
      ],
      "description": "stdlib.h (ISO):  Normal Termination."
    },
    "exp": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "exp10": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "exp10f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "exp10l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "exp2": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "exp2f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "exp2l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "expf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "expl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "expm1": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "expm1f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "expm1l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "fabs": {
      "return type": "double",
      "arguments": [
        "double number"
      ],
      "description": "math.h (ISO):  Absolute Value."
    },
    "fabsf": {
      "return type": "float",
      "arguments": [
        "float number"
      ],
      "description": "math.h (ISO):  Absolute Value."
    },
    "fabsl": {
      "return type": "long double",
      "arguments": [
        "long double number"
      ],
      "description": "math.h (ISO):  Absolute Value."
    },
    "__fbufsize": {
      "return type": "size_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Controlling Which Kind of Buffering."
    },
    "fchdir": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "unistd.h (XPG):  Working Directory."
    },
    "fchmod": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "mode_t mode"
      ],
      "description": "sys/stat.h (BSD):  Assigning File Permissions."
    },
    "fchown": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "uid_t owner",
        "gid_t group"
      ],
      "description": "unistd.h (BSD):  File Owner."
    },
    "fclose": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Closing Streams."
    },
    "fcloseall": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdio.h (GNU):  Closing Streams."
    },
    "fcntl": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int command",
        "…"
      ],
      "description": "fcntl.h (POSIX.1):  Control Operations on Files."
    },
    "fcvt": {
      "return type": "char *",
      "arguments": [
        "double value",
        "int ndigit",
        "int *decpt",
        "int *neg"
      ],
      "description": "stdlib.h (SVID, Unix98):  Old-fashioned System V number-to-string functions."
    },
    "fcvt_r": {
      "return type": "int",
      "arguments": [
        "double value",
        "int ndigit",
        "int *decpt",
        "int *neg",
        "char *buf",
        "size_t len"
      ],
      "description": "stdlib.h (SVID, Unix98):  Old-fashioned System V number-to-string functions."
    },
    "fdatasync": {
      "return type": "int",
      "arguments": [
        "int fildes"
      ],
      "description": "unistd.h (POSIX):  Synchronizing I/O operations."
    },
    "FD_CLR": {
      "return type": "void",
      "arguments": [
        "int filedes",
        "fd_set *set"
      ],
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "fdim": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fdimf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fdiml": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "FD_ISSET": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "const fd_set *set"
      ],
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "fdopen": {
      "return type": "FILE *",
      "arguments": [
        "int filedes",
        "const char *opentype"
      ],
      "description": "stdio.h (POSIX.1):  Descriptors and Streams."
    },
    "fdopendir": {
      "return type": "DIR *",
      "arguments": [
        "int fd"
      ],
      "description": "dirent.h (GNU):  Opening a Directory Stream."
    },
    "FD_SET": {
      "return type": "void",
      "arguments": [
        "int filedes",
        "fd_set *set"
      ],
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "FD_ZERO": {
      "return type": "void",
      "arguments": [
        "fd_set *set"
      ],
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "feclearexcept": {
      "return type": "int",
      "arguments": [
        "int excepts"
      ],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "fedisableexcept": {
      "return type": "int",
      "arguments": [
        "int excepts"
      ],
      "description": "fenv.h (GNU):  Floating-Point Control Functions."
    },
    "feenableexcept": {
      "return type": "int",
      "arguments": [
        "int excepts"
      ],
      "description": "fenv.h (GNU):  Floating-Point Control Functions."
    },
    "fegetenv": {
      "return type": "int",
      "arguments": [
        "fenv_t *envp"
      ],
      "description": "fenv.h (ISO):  Floating-Point Control Functions."
    },
    "fegetexcept": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "fenv.h (GNU):  Floating-Point Control Functions."
    },
    "fegetexceptflag": {
      "return type": "int",
      "arguments": [
        "fexcept_t *flagp",
        "int excepts"
      ],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "fegetround": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "feholdexcept": {
      "return type": "int",
      "arguments": [
        "fenv_t *envp"
      ],
      "description": "fenv.h (ISO):  Floating-Point Control Functions."
    },
    "feof": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  End-Of-File and Errors."
    },
    "feof_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  End-Of-File and Errors."
    },
    "feraiseexcept": {
      "return type": "int",
      "arguments": [
        "int excepts"
      ],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "ferror": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  End-Of-File and Errors."
    },
    "ferror_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  End-Of-File and Errors."
    },
    "fesetenv": {
      "return type": "int",
      "arguments": [
        "const fenv_t *envp"
      ],
      "description": "fenv.h (ISO):  Floating-Point Control Functions."
    },
    "fesetexceptflag": {
      "return type": "int",
      "arguments": [
        "const fexcept_t *flagp",
        "int excepts"
      ],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "fesetround": {
      "return type": "int",
      "arguments": [
        "int round"
      ],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "fetestexcept": {
      "return type": "int",
      "arguments": [
        "int excepts"
      ],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "feupdateenv": {
      "return type": "int",
      "arguments": [
        "const fenv_t *envp"
      ],
      "description": "fenv.h (ISO):  Floating-Point Control Functions."
    },
    "fflush": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Flushing Buffers."
    },
    "fflush_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Flushing Buffers."
    },
    "fgetc": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Character Input."
    },
    "fgetc_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Character Input."
    },
    "fgetgrent": {
      "return type": "struct group *",
      "arguments": [
        "FILE *stream"
      ],
      "description": "grp.h (SVID):  Scanning the List of All Groups."
    },
    "fgetgrent_r": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "struct group *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct group **result"
      ],
      "description": "grp.h (GNU):  Scanning the List of All Groups."
    },
    "fgetpos": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "fpos_t *position"
      ],
      "description": "stdio.h (ISO):  Portable File-Position Functions."
    },
    "fgetpos64": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "fpos64_t *position"
      ],
      "description": "stdio.h (Unix98):  Portable File-Position Functions."
    },
    "fgetpwent": {
      "return type": "struct passwd *",
      "arguments": [
        "FILE *stream"
      ],
      "description": "pwd.h (SVID):  Scanning the List of All Users."
    },
    "fgetpwent_r": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "struct passwd *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct passwd **result"
      ],
      "description": "pwd.h (GNU):  Scanning the List of All Users."
    },
    "fgets": {
      "return type": "char *",
      "arguments": [
        "char *s",
        "int count",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Line-Oriented Input."
    },
    "fgets_unlocked": {
      "return type": "char *",
      "arguments": [
        "char *s",
        "int count",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Line-Oriented Input."
    },
    "fgetwc": {
      "return type": "wint_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Character Input."
    },
    "fgetwc_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "wchar.h (GNU):  Character Input."
    },
    "fgetws": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *ws",
        "int count",
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Line-Oriented Input."
    },
    "fgetws_unlocked": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *ws",
        "int count",
        "FILE *stream"
      ],
      "description": "wchar.h (GNU):  Line-Oriented Input."
    },
    "fileno": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX.1):  Descriptors and Streams."
    },
    "fileno_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Descriptors and Streams."
    },
    "finite": {
      "return type": "int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "finitef": {
      "return type": "int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "finitel": {
      "return type": "int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "__flbf": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Controlling Which Kind of Buffering."
    },
    "flockfile": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Streams and Threads."
    },
    "floor": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "floorf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "floorl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "_flushlbf": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "stdio_ext.h (GNU):  Flushing Buffers."
    },
    "fma": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y",
        "double z"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmaf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y",
        "float z"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmal": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y",
        "long double z"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmax": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmaxf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmaxl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmemopen": {
      "return type": "FILE *",
      "arguments": [
        "void *buf",
        "size_t size",
        "const char *opentype"
      ],
      "description": "stdio.h (GNU):  String Streams."
    },
    "fmin": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fminf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fminl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Miscellaneous FP arithmetic functions."
    },
    "fmod": {
      "return type": "double",
      "arguments": [
        "double numerator",
        "double denominator"
      ],
      "description": "math.h (ISO):  Remainder Functions."
    },
    "fmodf": {
      "return type": "float",
      "arguments": [
        "float numerator",
        "float denominator"
      ],
      "description": "math.h (ISO):  Remainder Functions."
    },
    "fmodl": {
      "return type": "long double",
      "arguments": [
        "long double numerator",
        "long double denominator"
      ],
      "description": "math.h (ISO):  Remainder Functions."
    },
    "fmtmsg": {
      "return type": "int",
      "arguments": [
        "long int classification",
        "const char *label",
        "int severity",
        "const char *text",
        "const char *action",
        "const char *tag"
      ],
      "description": "fmtmsg.h (XPG):  Printing Formatted Messages."
    },
    "fnmatch": {
      "return type": "int",
      "arguments": [
        "const char *pattern",
        "const char *string",
        "int flags"
      ],
      "description": "fnmatch.h (POSIX.2):  Wildcard Matching."
    },
    "fopen": {
      "return type": "FILE *",
      "arguments": [
        "const char *filename",
        "const char *opentype"
      ],
      "description": "stdio.h (ISO):  Opening Streams."
    },
    "fopen64": {
      "return type": "FILE *",
      "arguments": [
        "const char *filename",
        "const char *opentype"
      ],
      "description": "stdio.h (Unix98):  Opening Streams."
    },
    "fopencookie": {
      "return type": "FILE *",
      "arguments": [
        "void *cookie",
        "const char *opentype",
        "cookie_io_functions_t io-functions"
      ],
      "description": "stdio.h (GNU):  Custom Streams and Cookies."
    },
    "fork": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Creating a Process."
    },
    "forkpty": {
      "return type": "int",
      "arguments": [
        "int *amaster",
        "char *name",
        "const struct termios *termp",
        "const struct winsize *winp"
      ],
      "description": "pty.h (BSD):  Opening a Pseudo-Terminal Pair."
    },
    "fpathconf": {
      "return type": "long int",
      "arguments": [
        "int filedes",
        "int parameter"
      ],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "fpclassify": {
      "return type": "int",
      "arguments": [
        "float-type x"
      ],
      "description": "math.h (ISO):  Floating-Point Number Classification Functions."
    },
    "__fpending": {
      "return type": "size_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Controlling Which Kind of Buffering."
    },
    "fprintf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Output Functions."
    },
    "__fpurge": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Flushing Buffers."
    },
    "fputc": {
      "return type": "int",
      "arguments": [
        "int c",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Simple Output by Characters or Lines."
    },
    "fputc_unlocked": {
      "return type": "int",
      "arguments": [
        "int c",
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Simple Output by Characters or Lines."
    },
    "fputs": {
      "return type": "int",
      "arguments": [
        "const char *s",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Simple Output by Characters or Lines."
    },
    "fputs_unlocked": {
      "return type": "int",
      "arguments": [
        "const char *s",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Simple Output by Characters or Lines."
    },
    "fputwc": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc",
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Simple Output by Characters or Lines."
    },
    "fputwc_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc",
        "FILE *stream"
      ],
      "description": "wchar.h (POSIX):  Simple Output by Characters or Lines."
    },
    "fputws": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws",
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Simple Output by Characters or Lines."
    },
    "fputws_unlocked": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws",
        "FILE *stream"
      ],
      "description": "wchar.h (GNU):  Simple Output by Characters or Lines."
    },
    "fread": {
      "return type": "size_t",
      "arguments": [
        "void *data",
        "size_t size",
        "size_t count",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Block Input/Output."
    },
    "__freadable": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Opening Streams."
    },
    "__freading": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Opening Streams."
    },
    "fread_unlocked": {
      "return type": "size_t",
      "arguments": [
        "void *data",
        "size_t size",
        "size_t count",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Block Input/Output."
    },
    "free": {
      "return type": "void",
      "arguments": [
        "void *ptr"
      ],
      "description": "malloc.h, stdlib.h (ISO):  Freeing Memory Allocated with malloc."
    },
    "freopen": {
      "return type": "FILE *",
      "arguments": [
        "const char *filename",
        "const char *opentype",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Opening Streams."
    },
    "freopen64": {
      "return type": "FILE *",
      "arguments": [
        "const char *filename",
        "const char *opentype",
        "FILE *stream"
      ],
      "description": "stdio.h (Unix98):  Opening Streams."
    },
    "frexp": {
      "return type": "double",
      "arguments": [
        "double value",
        "int *exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "frexpf": {
      "return type": "float",
      "arguments": [
        "float value",
        "int *exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "frexpl": {
      "return type": "long double",
      "arguments": [
        "long double value",
        "int *exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "fscanf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Input Functions."
    },
    "fseek": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "long int offset",
        "int whence"
      ],
      "description": "stdio.h (ISO):  File Positioning."
    },
    "fseeko": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "off_t offset",
        "int whence"
      ],
      "description": "stdio.h (Unix98):  File Positioning."
    },
    "fseeko64": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "off64_t offset",
        "int whence"
      ],
      "description": "stdio.h (Unix98):  File Positioning."
    },
    "__fsetlocking": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "int type"
      ],
      "description": "stdio_ext.h (GNU):  Streams and Threads."
    },
    "fsetpos": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const fpos_t *position"
      ],
      "description": "stdio.h (ISO):  Portable File-Position Functions."
    },
    "fsetpos64": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const fpos64_t *position"
      ],
      "description": "stdio.h (Unix98):  Portable File-Position Functions."
    },
    "fstat": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "struct stat *buf"
      ],
      "description": "sys/stat.h (POSIX.1):  Reading the Attributes of a File."
    },
    "fstat64": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "struct stat64 *buf"
      ],
      "description": "sys/stat.h (Unix98):  Reading the Attributes of a File."
    },
    "fsync": {
      "return type": "int",
      "arguments": [
        "int fildes"
      ],
      "description": "unistd.h (POSIX):  Synchronizing I/O operations."
    },
    "ftell": {
      "return type": "long int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  File Positioning."
    },
    "ftello": {
      "return type": "off_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (Unix98):  File Positioning."
    },
    "ftello64": {
      "return type": "off64_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (Unix98):  File Positioning."
    },
    "ftruncate": {
      "return type": "int",
      "arguments": [
        "int fd",
        "off_t length"
      ],
      "description": "unistd.h (POSIX):  File Size."
    },
    "ftruncate64": {
      "return type": "int",
      "arguments": [
        "int id",
        "off64_t length"
      ],
      "description": "unistd.h (Unix98):  File Size."
    },
    "ftrylockfile": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Streams and Threads."
    },
    "ftw": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "__ftw_func_t func",
        "int descriptors"
      ],
      "description": "ftw.h (SVID):  Working with Directory Trees."
    },
    "ftw64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "__ftw64_func_t func",
        "int descriptors"
      ],
      "description": "ftw.h (Unix98):  Working with Directory Trees."
    },
    "funlockfile": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Streams and Threads."
    },
    "futimes": {
      "return type": "int",
      "arguments": [
        "int fd",
        "const struct timeval tvp[2]"
      ],
      "description": "sys/time.h (BSD):  File Times."
    },
    "fwide": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "int mode"
      ],
      "description": "wchar.h (ISO):  Streams in Internationalized Applications."
    },
    "fwprintf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (ISO):  Formatted Output Functions."
    },
    "__fwritable": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Opening Streams."
    },
    "fwrite": {
      "return type": "size_t",
      "arguments": [
        "const void *data",
        "size_t size",
        "size_t count",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Block Input/Output."
    },
    "fwrite_unlocked": {
      "return type": "size_t",
      "arguments": [
        "const void *data",
        "size_t size",
        "size_t count",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Block Input/Output."
    },
    "__fwriting": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio_ext.h (GNU):  Opening Streams."
    },
    "fwscanf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (ISO):  Formatted Input Functions."
    },
    "gamma": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "gammaf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "gammal": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "(*__gconv_end_fct)": {
      "return type": "void",
      "arguments": [
        "*__gconv_end_fct) (struct gconv_step *"
      ],
      "description": "gconv.h (GNU):  The iconv Implementation in the GNU C Library."
    },
    "(*__gconv_fct)": {
      "return type": "int",
      "arguments": [
        "*__gconv_fct) (struct __gconv_step *",
        "struct __gconv_step_data *",
        "const char **",
        "const char *",
        "size_t *",
        "int"
      ],
      "description": "gconv.h (GNU):  The iconv Implementation in the GNU C Library."
    },
    "(*__gconv_init_fct)": {
      "return type": "int",
      "arguments": [
        "*__gconv_init_fct) (struct __gconv_step *"
      ],
      "description": "gconv.h (GNU):  The iconv Implementation in the GNU C Library."
    },
    "gcvt": {
      "return type": "char *",
      "arguments": [
        "double value",
        "int ndigit",
        "char *buf"
      ],
      "description": "stdlib.h (SVID, Unix98):  Old-fashioned System V number-to-string functions."
    },
    "getauxval": {
      "return type": "unsigned long int",
      "arguments": [
        "unsigned long int type"
      ],
      "description": "sys/auxv.h (sys/auxv.h):  Auxiliary Vector."
    },
    "get_avphys_pages": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "sys/sysinfo.h (GNU):  How to get information about the memory subsystem?."
    },
    "getc": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Character Input."
    },
    "getchar": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdio.h (ISO):  Character Input."
    },
    "getchar_unlocked": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdio.h (POSIX):  Character Input."
    },
    "getcontext": {
      "return type": "int",
      "arguments": [
        "ucontext_t *ucp"
      ],
      "description": "ucontext.h (SVID):  Complete Context Control."
    },
    "getc_unlocked": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Character Input."
    },
    "get_current_dir_name": {
      "return type": "char *",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (GNU):  Working Directory."
    },
    "getcwd": {
      "return type": "char *",
      "arguments": [
        "char *buffer",
        "size_t size"
      ],
      "description": "unistd.h (POSIX.1):  Working Directory."
    },
    "getdate": {
      "return type": "struct tm *",
      "arguments": [
        "const char *string"
      ],
      "description": "time.h (Unix98):  A More User-friendly Way to Parse Times and Dates."
    },
    "getdate_r": {
      "return type": "int",
      "arguments": [
        "const char *string",
        "struct tm *tp"
      ],
      "description": "time.h (GNU):  A More User-friendly Way to Parse Times and Dates."
    },
    "getdelim": {
      "return type": "ssize_t",
      "arguments": [
        "char **lineptr",
        "size_t *n",
        "int delimiter",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Line-Oriented Input."
    },
    "getdomainnname": {
      "return type": "int",
      "arguments": [
        "char *name",
        "size_t length"
      ],
      "description": "unistd.h (???):  Host Identification."
    },
    "getegid": {
      "return type": "gid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Reading the Persona of a Process."
    },
    "getenv": {
      "return type": "char *",
      "arguments": [
        "const char *name"
      ],
      "description": "stdlib.h (ISO):  Environment Access."
    },
    "geteuid": {
      "return type": "uid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Reading the Persona of a Process."
    },
    "getfsent": {
      "return type": "struct fstab *",
      "arguments": [
        "void"
      ],
      "description": "fstab.h (BSD):  The fstab file."
    },
    "getfsfile": {
      "return type": "struct fstab *",
      "arguments": [
        "const char *name"
      ],
      "description": "fstab.h (BSD):  The fstab file."
    },
    "getfsspec": {
      "return type": "struct fstab *",
      "arguments": [
        "const char *name"
      ],
      "description": "fstab.h (BSD):  The fstab file."
    },
    "getgid": {
      "return type": "gid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Reading the Persona of a Process."
    },
    "getgrent": {
      "return type": "struct group *",
      "arguments": [
        "void"
      ],
      "description": "grp.h (SVID, BSD):  Scanning the List of All Groups."
    },
    "getgrent_r": {
      "return type": "int",
      "arguments": [
        "struct group *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct group **result"
      ],
      "description": "grp.h (GNU):  Scanning the List of All Groups."
    },
    "getgrgid": {
      "return type": "struct group *",
      "arguments": [
        "gid_t gid"
      ],
      "description": "grp.h (POSIX.1):  Looking Up One Group."
    },
    "getgrgid_r": {
      "return type": "int",
      "arguments": [
        "gid_t gid",
        "struct group *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct group **result"
      ],
      "description": "grp.h (POSIX.1c):  Looking Up One Group."
    },
    "getgrnam": {
      "return type": "struct group *",
      "arguments": [
        "const char *name"
      ],
      "description": "grp.h (SVID, BSD):  Looking Up One Group."
    },
    "getgrnam_r": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "struct group *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct group **result"
      ],
      "description": "grp.h (POSIX.1c):  Looking Up One Group."
    },
    "getgrouplist": {
      "return type": "int",
      "arguments": [
        "const char *user",
        "gid_t group",
        "gid_t *groups",
        "int *ngroups"
      ],
      "description": "grp.h (BSD):  Setting the Group IDs."
    },
    "getgroups": {
      "return type": "int",
      "arguments": [
        "int count",
        "gid_t *groups"
      ],
      "description": "unistd.h (POSIX.1):  Reading the Persona of a Process."
    },
    "gethostbyaddr": {
      "return type": "struct hostent *",
      "arguments": [
        "const void *addr",
        "socklen_t length",
        "int format"
      ],
      "description": "netdb.h (BSD):  Host Names."
    },
    "gethostbyaddr_r": {
      "return type": "int",
      "arguments": [
        "const void *addr",
        "socklen_t length",
        "int format",
        "struct hostent *restrict result_buf",
        "char *restrict buf",
        "size_t buflen",
        "struct hostent **restrict result",
        "int *restrict h_errnop"
      ],
      "description": "netdb.h (GNU):  Host Names."
    },
    "gethostbyname": {
      "return type": "struct hostent *",
      "arguments": [
        "const char *name"
      ],
      "description": "netdb.h (BSD):  Host Names."
    },
    "gethostbyname2": {
      "return type": "struct hostent *",
      "arguments": [
        "const char *name",
        "int af"
      ],
      "description": "netdb.h (IPv6 Basic API):  Host Names."
    },
    "gethostbyname2_r": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "int af",
        "struct hostent *restrict result_buf",
        "char *restrict buf",
        "size_t buflen",
        "struct hostent **restrict result",
        "int *restrict h_errnop"
      ],
      "description": "netdb.h (GNU):  Host Names."
    },
    "gethostbyname_r": {
      "return type": "int",
      "arguments": [
        "const char *restrict name",
        "struct hostent *restrict result_buf",
        "char *restrict buf",
        "size_t buflen",
        "struct hostent **restrict result",
        "int *restrict h_errnop"
      ],
      "description": "netdb.h (GNU):  Host Names."
    },
    "gethostent": {
      "return type": "struct hostent *",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Host Names."
    },
    "gethostid": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (BSD):  Host Identification."
    },
    "gethostname": {
      "return type": "int",
      "arguments": [
        "char *name",
        "size_t size"
      ],
      "description": "unistd.h (BSD):  Host Identification."
    },
    "getitimer": {
      "return type": "int",
      "arguments": [
        "int which",
        "struct itimerval *old"
      ],
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "getline": {
      "return type": "ssize_t",
      "arguments": [
        "char **lineptr",
        "size_t *n",
        "FILE *stream"
      ],
      "description": "stdio.h (GNU):  Line-Oriented Input."
    },
    "getloadavg": {
      "return type": "int",
      "arguments": [
        "double loadavg[]",
        "int nelem"
      ],
      "description": "stdlib.h (BSD):  Learn about the processors available."
    },
    "getlogin": {
      "return type": "char *",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Identifying Who Logged In."
    },
    "getmntent": {
      "return type": "struct mntent *",
      "arguments": [
        "FILE *stream"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "getmntent_r": {
      "return type": "struct mntent *",
      "arguments": [
        "FILE *stream",
        "struct mntent *result",
        "char *buffer",
        "int bufsize"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "getnetbyaddr": {
      "return type": "struct netent *",
      "arguments": [
        "uint32_t net",
        "int type"
      ],
      "description": "netdb.h (BSD):  Networks Database."
    },
    "getnetbyname": {
      "return type": "struct netent *",
      "arguments": [
        "const char *name"
      ],
      "description": "netdb.h (BSD):  Networks Database."
    },
    "getnetent": {
      "return type": "struct netent *",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Networks Database."
    },
    "getnetgrent": {
      "return type": "int",
      "arguments": [
        "char **hostp",
        "char **userp",
        "char **domainp"
      ],
      "description": "netdb.h (BSD):  Looking up one Netgroup."
    },
    "getnetgrent_r": {
      "return type": "int",
      "arguments": [
        "char **hostp",
        "char **userp",
        "char **domainp",
        "char *buffer",
        "size_t buflen"
      ],
      "description": "netdb.h (GNU):  Looking up one Netgroup."
    },
    "get_nprocs": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "sys/sysinfo.h (GNU):  Learn about the processors available."
    },
    "get_nprocs_conf": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "sys/sysinfo.h (GNU):  Learn about the processors available."
    },
    "getopt": {
      "return type": "int",
      "arguments": [
        "int argc",
        "char *const *argv",
        "const char *options"
      ],
      "description": "unistd.h (POSIX.2):  Using the getopt function."
    },
    "getopt_long": {
      "return type": "int",
      "arguments": [
        "int argc",
        "char *const *argv",
        "const char *shortopts",
        "const struct option *longopts",
        "int *indexptr"
      ],
      "description": "getopt.h (GNU):  Parsing Long Options with getopt_long."
    },
    "getopt_long_only": {
      "return type": "int",
      "arguments": [
        "int argc",
        "char *const *argv",
        "const char *shortopts",
        "const struct option *longopts",
        "int *indexptr"
      ],
      "description": "getopt.h (GNU):  Parsing Long Options with getopt_long."
    },
    "getpagesize": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (BSD):  How to get information about the memory subsystem?."
    },
    "getpass": {
      "return type": "char *",
      "arguments": [
        "const char *prompt"
      ],
      "description": "unistd.h (BSD):  Reading Passwords."
    },
    "getpeername": {
      "return type": "int",
      "arguments": [
        "int socket",
        "struct sockaddr *addr",
        "socklen_t *length-ptr"
      ],
      "description": "sys/socket.h (BSD):  Who is Connected to Me?."
    },
    "getpgid": {
      "return type": "int",
      "arguments": [
        "pid_t pid"
      ],
      "description": "unistd.h (POSIX.1):  Process Group Functions."
    },
    "getpgrp": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Process Group Functions."
    },
    "get_phys_pages": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "sys/sysinfo.h (GNU):  How to get information about the memory subsystem?."
    },
    "getpid": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Process Identification."
    },
    "getppid": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Process Identification."
    },
    "getpriority": {
      "return type": "int",
      "arguments": [
        "int class",
        "int id"
      ],
      "description": "sys/resource.h (BSD,POSIX):  Functions For Traditional Scheduling."
    },
    "getprotobyname": {
      "return type": "struct protoent *",
      "arguments": [
        "const char *name"
      ],
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "getprotobynumber": {
      "return type": "struct protoent *",
      "arguments": [
        "int protocol"
      ],
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "getprotoent": {
      "return type": "struct protoent *",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "getpt": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (GNU):  Allocating Pseudo-Terminals."
    },
    "getpwent": {
      "return type": "struct passwd *",
      "arguments": [
        "void"
      ],
      "description": "pwd.h (POSIX.1):  Scanning the List of All Users."
    },
    "getpwent_r": {
      "return type": "int",
      "arguments": [
        "struct passwd *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct passwd **result"
      ],
      "description": "pwd.h (GNU):  Scanning the List of All Users."
    },
    "getpwnam": {
      "return type": "struct passwd *",
      "arguments": [
        "const char *name"
      ],
      "description": "pwd.h (POSIX.1):  Looking Up One User."
    },
    "getpwnam_r": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "struct passwd *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct passwd **result"
      ],
      "description": "pwd.h (POSIX.1c):  Looking Up One User."
    },
    "getpwuid": {
      "return type": "struct passwd *",
      "arguments": [
        "uid_t uid"
      ],
      "description": "pwd.h (POSIX.1):  Looking Up One User."
    },
    "getpwuid_r": {
      "return type": "int",
      "arguments": [
        "uid_t uid",
        "struct passwd *result_buf",
        "char *buffer",
        "size_t buflen",
        "struct passwd **result"
      ],
      "description": "pwd.h (POSIX.1c):  Looking Up One User."
    },
    "getrlimit": {
      "return type": "int",
      "arguments": [
        "int resource",
        "struct rlimit *rlp"
      ],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "getrlimit64": {
      "return type": "int",
      "arguments": [
        "int resource",
        "struct rlimit64 *rlp"
      ],
      "description": "sys/resource.h (Unix98):  Limiting Resource Usage."
    },
    "getrusage": {
      "return type": "int",
      "arguments": [
        "int processes",
        "struct rusage *rusage"
      ],
      "description": "sys/resource.h (BSD):  Resource Usage."
    },
    "gets": {
      "return type": "char *",
      "arguments": [
        "char *s"
      ],
      "description": "stdio.h (ISO):  Line-Oriented Input."
    },
    "getservbyname": {
      "return type": "struct servent *",
      "arguments": [
        "const char *name",
        "const char *proto"
      ],
      "description": "netdb.h (BSD):  The Services Database."
    },
    "getservbyport": {
      "return type": "struct servent *",
      "arguments": [
        "int port",
        "const char *proto"
      ],
      "description": "netdb.h (BSD):  The Services Database."
    },
    "getservent": {
      "return type": "struct servent *",
      "arguments": [
        "void"
      ],
      "description": "netdb.h (BSD):  The Services Database."
    },
    "getsid": {
      "return type": "pid_t",
      "arguments": [
        "pid_t pid"
      ],
      "description": "unistd.h (SVID):  Process Group Functions."
    },
    "getsockname": {
      "return type": "int",
      "arguments": [
        "int socket",
        "struct sockaddr *addr",
        "socklen_t *length-ptr"
      ],
      "description": "sys/socket.h (BSD):  Reading the Address of a Socket."
    },
    "getsockopt": {
      "return type": "int",
      "arguments": [
        "int socket",
        "int level",
        "int optname",
        "void *optval",
        "socklen_t *optlen-ptr"
      ],
      "description": "sys/socket.h (BSD):  Socket Option Functions."
    },
    "getsubopt": {
      "return type": "int",
      "arguments": [
        "char **optionp",
        "char *const *tokens",
        "char **valuep"
      ],
      "description": "stdlib.h (stdlib.h):  Suboptions Example."
    },
    "gettext": {
      "return type": "char *",
      "arguments": [
        "const char *msgid"
      ],
      "description": "libintl.h (GNU):  What has to be done to translate a message?."
    },
    "gettimeofday": {
      "return type": "int",
      "arguments": [
        "struct timeval *tp",
        "struct timezone *tzp"
      ],
      "description": "sys/time.h (BSD):  High-Resolution Calendar."
    },
    "getuid": {
      "return type": "uid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Reading the Persona of a Process."
    },
    "getumask": {
      "return type": "mode_t",
      "arguments": [
        "void"
      ],
      "description": "sys/stat.h (GNU):  Assigning File Permissions."
    },
    "getutent": {
      "return type": "struct utmp *",
      "arguments": [
        "void"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "getutent_r": {
      "return type": "int",
      "arguments": [
        "struct utmp *buffer",
        "struct utmp **result"
      ],
      "description": "utmp.h (GNU):  Manipulating the User Accounting Database."
    },
    "getutid": {
      "return type": "struct utmp *",
      "arguments": [
        "const struct utmp *id"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "getutid_r": {
      "return type": "int",
      "arguments": [
        "const struct utmp *id",
        "struct utmp *buffer",
        "struct utmp **result"
      ],
      "description": "utmp.h (GNU):  Manipulating the User Accounting Database."
    },
    "getutline": {
      "return type": "struct utmp *",
      "arguments": [
        "const struct utmp *line"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "getutline_r": {
      "return type": "int",
      "arguments": [
        "const struct utmp *line",
        "struct utmp *buffer",
        "struct utmp **result"
      ],
      "description": "utmp.h (GNU):  Manipulating the User Accounting Database."
    },
    "getutmp": {
      "return type": "int",
      "arguments": [
        "const struct utmpx *utmpx",
        "struct utmp *utmp"
      ],
      "description": "utmp.h (GNU):  XPG User Accounting Database Functions."
    },
    "getutmpx": {
      "return type": "int",
      "arguments": [
        "const struct utmp *utmp",
        "struct utmpx *utmpx"
      ],
      "description": "utmp.h (GNU):  XPG User Accounting Database Functions."
    },
    "getutxent": {
      "return type": "struct utmpx *",
      "arguments": [
        "void"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "getutxid": {
      "return type": "struct utmpx *",
      "arguments": [
        "const struct utmpx *id"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "getutxline": {
      "return type": "struct utmpx *",
      "arguments": [
        "const struct utmpx *line"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "getw": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (SVID):  Character Input."
    },
    "getwc": {
      "return type": "wint_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Character Input."
    },
    "getwchar": {
      "return type": "wint_t",
      "arguments": [
        "void"
      ],
      "description": "wchar.h (ISO):  Character Input."
    },
    "getwchar_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "void"
      ],
      "description": "wchar.h (GNU):  Character Input."
    },
    "getwc_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "FILE *stream"
      ],
      "description": "wchar.h (GNU):  Character Input."
    },
    "getwd": {
      "return type": "char *",
      "arguments": [
        "char *buffer"
      ],
      "description": "unistd.h (BSD):  Working Directory."
    },
    "(*errfunc)": {
      "return type": "int glob64 (const char *pattern, int flags, int",
      "arguments": [
        "const char *pattern",
        "int flags",
        "int (*errfunc) (const char *filename",
        "int error-code)",
        "glob64_t *vector-ptr"
      ],
      "description": "glob.h (GNU):  Calling glob."
    },
    "globfree": {
      "return type": "void",
      "arguments": [
        "glob_t *pglob"
      ],
      "description": "glob.h (POSIX.2):  More Flags for Globbing."
    },
    "globfree64": {
      "return type": "void",
      "arguments": [
        "glob64_t *pglob"
      ],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "gmtime": {
      "return type": "struct tm *",
      "arguments": [
        "const time_t *time"
      ],
      "description": "time.h (ISO):  Broken-down Time."
    },
    "gmtime_r": {
      "return type": "struct tm *",
      "arguments": [
        "const time_t *time",
        "struct tm *resultp"
      ],
      "description": "time.h (POSIX.1c):  Broken-down Time."
    },
    "grantpt": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "stdlib.h (SVID, XPG4.2):  Allocating Pseudo-Terminals."
    },
    "gsignal": {
      "return type": "int",
      "arguments": [
        "int signum"
      ],
      "description": "signal.h (SVID):  Signaling Yourself."
    },
    "gtty": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "struct sgttyb *attributes"
      ],
      "description": "sgtty.h (BSD):  BSD Terminal Modes."
    },
    "hasmntopt": {
      "return type": "char *",
      "arguments": [
        "const struct mntent *mnt",
        "const char *opt"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "hcreate": {
      "return type": "int",
      "arguments": [
        "size_t nel"
      ],
      "description": "search.h (SVID):  The hsearch function.."
    },
    "hcreate_r": {
      "return type": "int",
      "arguments": [
        "size_t nel",
        "struct hsearch_data *htab"
      ],
      "description": "search.h (GNU):  The hsearch function.."
    },
    "hdestroy": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "search.h (SVID):  The hsearch function.."
    },
    "hdestroy_r": {
      "return type": "void",
      "arguments": [
        "struct hsearch_data *htab"
      ],
      "description": "search.h (GNU):  The hsearch function.."
    },
    "hsearch": {
      "return type": "ENTRY *",
      "arguments": [
        "ENTRY item",
        "ACTION action"
      ],
      "description": "search.h (SVID):  The hsearch function.."
    },
    "hsearch_r": {
      "return type": "int",
      "arguments": [
        "ENTRY item",
        "ACTION action",
        "ENTRY **retval",
        "struct hsearch_data *htab"
      ],
      "description": "search.h (GNU):  The hsearch function.."
    },
    "htonl": {
      "return type": "uint32_t",
      "arguments": [
        "uint32_t hostlong"
      ],
      "description": "netinet/in.h (BSD):  Byte Order Conversion."
    },
    "htons": {
      "return type": "uint16_t",
      "arguments": [
        "uint16_t hostshort"
      ],
      "description": "netinet/in.h (BSD):  Byte Order Conversion."
    },
    "hypot": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "hypotf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "hypotl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "iconv": {
      "return type": "size_t",
      "arguments": [
        "iconv_t cd",
        "char **inbuf",
        "size_t *inbytesleft",
        "char **outbuf",
        "size_t *outbytesleft"
      ],
      "description": "iconv.h (XPG2):  Generic Character Set Conversion Interface."
    },
    "iconv_close": {
      "return type": "int",
      "arguments": [
        "iconv_t cd"
      ],
      "description": "iconv.h (XPG2):  Generic Character Set Conversion Interface."
    },
    "iconv_open": {
      "return type": "iconv_t",
      "arguments": [
        "const char *tocode",
        "const char *fromcode"
      ],
      "description": "iconv.h (XPG2):  Generic Character Set Conversion Interface."
    },
    "if_freenameindex": {
      "return type": "void",
      "arguments": [
        "struct if_nameindex *ptr"
      ],
      "description": "net/if.h (IPv6 basic API):  Interface Naming."
    },
    "if_indextoname": {
      "return type": "char *",
      "arguments": [
        "unsigned int ifindex",
        "char *ifname"
      ],
      "description": "net/if.h (IPv6 basic API):  Interface Naming."
    },
    "if_nameindex": {
      "return type": "struct if_nameindex *",
      "arguments": [
        "void"
      ],
      "description": "net/if.h (IPv6 basic API):  Interface Naming."
    },
    "if_nametoindex": {
      "return type": "unsigned int",
      "arguments": [
        "const char *ifname"
      ],
      "description": "net/if.h (IPv6 basic API):  Interface Naming."
    },
    "IFTODT": {
      "return type": "int",
      "arguments": [
        "mode_t mode"
      ],
      "description": "dirent.h (BSD):  Format of a Directory Entry."
    },
    "ilogb": {
      "return type": "int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "ilogbf": {
      "return type": "int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "ilogbl": {
      "return type": "int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "imaxabs": {
      "return type": "intmax_t",
      "arguments": [
        "intmax_t number"
      ],
      "description": "inttypes.h (ISO):  Absolute Value."
    },
    "imaxdiv": {
      "return type": "imaxdiv_t",
      "arguments": [
        "intmax_t numerator",
        "intmax_t denominator"
      ],
      "description": "inttypes.h (ISO):  Integer Division."
    },
    "index": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "int c"
      ],
      "description": "string.h (BSD):  Search Functions."
    },
    "inet_addr": {
      "return type": "uint32_t",
      "arguments": [
        "const char *name"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_aton": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "struct in_addr *addr"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_lnaof": {
      "return type": "uint32_t",
      "arguments": [
        "struct in_addr addr"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_makeaddr": {
      "return type": "struct in_addr",
      "arguments": [
        "uint32_t net",
        "uint32_t local"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_netof": {
      "return type": "uint32_t",
      "arguments": [
        "struct in_addr addr"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_network": {
      "return type": "uint32_t",
      "arguments": [
        "const char *name"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_ntoa": {
      "return type": "char *",
      "arguments": [
        "struct in_addr addr"
      ],
      "description": "arpa/inet.h (BSD):  Host Address Functions."
    },
    "inet_ntop": {
      "return type": "const char *",
      "arguments": [
        "int af",
        "const void *cp",
        "char *buf",
        "socklen_t len"
      ],
      "description": "arpa/inet.h (IPv6 basic API):  Host Address Functions."
    },
    "inet_pton": {
      "return type": "int",
      "arguments": [
        "int af",
        "const char *cp",
        "void *buf"
      ],
      "description": "arpa/inet.h (IPv6 basic API):  Host Address Functions."
    },
    "initgroups": {
      "return type": "int",
      "arguments": [
        "const char *user",
        "gid_t group"
      ],
      "description": "grp.h (BSD):  Setting the Group IDs."
    },
    "initstate": {
      "return type": "char *",
      "arguments": [
        "unsigned int seed",
        "char *state",
        "size_t size"
      ],
      "description": "stdlib.h (BSD):  BSD Random Number Functions."
    },
    "initstate_r": {
      "return type": "int",
      "arguments": [
        "unsigned int seed",
        "char *restrict statebuf",
        "size_t statelen",
        "struct random_data *restrict buf"
      ],
      "description": "stdlib.h (GNU):  BSD Random Number Functions."
    },
    "innetgr": {
      "return type": "int",
      "arguments": [
        "const char *netgroup",
        "const char *host",
        "const char *user",
        "const char *domain"
      ],
      "description": "netdb.h (BSD):  Testing for Netgroup Membership."
    },
    "ioctl": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int command",
        "…"
      ],
      "description": "sys/ioctl.h (BSD):  Generic I/O Control operations."
    },
    "isalnum": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isalpha": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isascii": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (SVID, BSD):  Classification of Characters."
    },
    "isatty": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "unistd.h (POSIX.1):  Identifying Terminals."
    },
    "isblank": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "iscntrl": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isdigit": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isfinite": {
      "return type": "int",
      "arguments": [
        "float-type x"
      ],
      "description": "math.h (ISO):  Floating-Point Number Classification Functions."
    },
    "isgraph": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isgreater": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "isgreaterequal": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "isinf": {
      "return type": "int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isinff": {
      "return type": "int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isinfl": {
      "return type": "int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isless": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "islessequal": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "islessgreater": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "islower": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isnan": {
      "return type": "int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isnanf": {
      "return type": "int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isnanl": {
      "return type": "int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (BSD):  Floating-Point Number Classification Functions."
    },
    "isnormal": {
      "return type": "int",
      "arguments": [
        "float-type x"
      ],
      "description": "math.h (ISO):  Floating-Point Number Classification Functions."
    },
    "isprint": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "ispunct": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "issignaling": {
      "return type": "int",
      "arguments": [
        "float-type x"
      ],
      "description": "math.h (GNU):  Floating-Point Number Classification Functions."
    },
    "isspace": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "isunordered": {
      "return type": "int",
      "arguments": [
        "real-floating x",
        "real-floating y"
      ],
      "description": "math.h (ISO):  Floating-Point Comparison Functions."
    },
    "isupper": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "iswalnum": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswalpha": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswblank": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswcntrl": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswctype": {
      "return type": "int",
      "arguments": [
        "wint_t wc",
        "wctype_t desc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswdigit": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswgraph": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswlower": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "ctype.h (ISO):  Character class determination for wide characters."
    },
    "iswprint": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswpunct": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswspace": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswupper": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "iswxdigit": {
      "return type": "int",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "isxdigit": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Classification of Characters."
    },
    "j0": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "j0f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "j0l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "j1": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "j1f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "j1l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "jn": {
      "return type": "double",
      "arguments": [
        "int n",
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "jnf": {
      "return type": "float",
      "arguments": [
        "int n",
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "jnl": {
      "return type": "long double",
      "arguments": [
        "int n",
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "jrand48": {
      "return type": "long int",
      "arguments": [
        "unsigned short int xsubi[3]"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "jrand48_r": {
      "return type": "int",
      "arguments": [
        "unsigned short int xsubi[3]",
        "struct drand48_data *buffer",
        "long int *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "kill": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "int signum"
      ],
      "description": "signal.h (POSIX.1):  Signaling Another Process."
    },
    "killpg": {
      "return type": "int",
      "arguments": [
        "int pgid",
        "int signum"
      ],
      "description": "signal.h (BSD):  Signaling Another Process."
    },
    "l64a": {
      "return type": "char *",
      "arguments": [
        "long int n"
      ],
      "description": "stdlib.h (XPG):  Encode Binary Data."
    },
    "labs": {
      "return type": "long int",
      "arguments": [
        "long int number"
      ],
      "description": "stdlib.h (ISO):  Absolute Value."
    },
    "lcong48": {
      "return type": "void",
      "arguments": [
        "unsigned short int param[7]"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "lcong48_r": {
      "return type": "int",
      "arguments": [
        "unsigned short int param[7]",
        "struct drand48_data *buffer"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "ldexp": {
      "return type": "double",
      "arguments": [
        "double value",
        "int exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "ldexpf": {
      "return type": "float",
      "arguments": [
        "float value",
        "int exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "ldexpl": {
      "return type": "long double",
      "arguments": [
        "long double value",
        "int exponent"
      ],
      "description": "math.h (ISO):  Normalization Functions."
    },
    "ldiv": {
      "return type": "ldiv_t",
      "arguments": [
        "long int numerator",
        "long int denominator"
      ],
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "lfind": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "const void *base",
        "size_t *nmemb",
        "size_t size",
        "comparison_fn_t compar"
      ],
      "description": "search.h (SVID):  Array Search Function."
    },
    "lgamma": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "lgammaf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "lgammaf_r": {
      "return type": "float",
      "arguments": [
        "float x",
        "int *signp"
      ],
      "description": "math.h (XPG):  Special Functions."
    },
    "lgammal": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "lgammal_r": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "int *signp"
      ],
      "description": "math.h (XPG):  Special Functions."
    },
    "lgamma_r": {
      "return type": "double",
      "arguments": [
        "double x",
        "int *signp"
      ],
      "description": "math.h (XPG):  Special Functions."
    },
    "link": {
      "return type": "int",
      "arguments": [
        "const char *oldname",
        "const char *newname"
      ],
      "description": "unistd.h (POSIX.1):  Hard Links."
    },
    "lio_listio": {
      "return type": "int",
      "arguments": [
        "int mode",
        "struct aiocb *const list[]",
        "int nent",
        "struct sigevent *sig"
      ],
      "description": "aio.h (POSIX.1b):  Asynchronous Read and Write Operations."
    },
    "lio_listio64": {
      "return type": "int",
      "arguments": [
        "int mode",
        "struct aiocb64 *const list[]",
        "int nent",
        "struct sigevent *sig"
      ],
      "description": "aio.h (Unix98):  Asynchronous Read and Write Operations."
    },
    "listen": {
      "return type": "int",
      "arguments": [
        "int socket",
        "int n"
      ],
      "description": "sys/socket.h (BSD):  Listening for Connections."
    },
    "llabs": {
      "return type": "long long int",
      "arguments": [
        "long long int number"
      ],
      "description": "stdlib.h (ISO):  Absolute Value."
    },
    "lldiv": {
      "return type": "lldiv_t",
      "arguments": [
        "long long int numerator",
        "long long int denominator"
      ],
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "llrint": {
      "return type": "long long int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "llrintf": {
      "return type": "long long int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "llrintl": {
      "return type": "long long int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "llround": {
      "return type": "long long int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "llroundf": {
      "return type": "long long int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "llroundl": {
      "return type": "long long int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "localeconv": {
      "return type": "struct lconv *",
      "arguments": [
        "void"
      ],
      "description": "locale.h (ISO):  localeconv: It is portable but …."
    },
    "localtime": {
      "return type": "struct tm *",
      "arguments": [
        "const time_t *time"
      ],
      "description": "time.h (ISO):  Broken-down Time."
    },
    "localtime_r": {
      "return type": "struct tm *",
      "arguments": [
        "const time_t *time",
        "struct tm *resultp"
      ],
      "description": "time.h (POSIX.1c):  Broken-down Time."
    },
    "log": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log10": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log10f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log10l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log1p": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log1pf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log1pl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log2": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log2f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "log2l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "logb": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "logbf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "logbl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "logf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "login": {
      "return type": "void",
      "arguments": [
        "const struct utmp *entry"
      ],
      "description": "utmp.h (BSD):  Logging In and Out."
    },
    "login_tty": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "utmp.h (BSD):  Logging In and Out."
    },
    "logl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "logout": {
      "return type": "int",
      "arguments": [
        "const char *ut_line"
      ],
      "description": "utmp.h (BSD):  Logging In and Out."
    },
    "logwtmp": {
      "return type": "void",
      "arguments": [
        "const char *ut_line",
        "const char *ut_name",
        "const char *ut_host"
      ],
      "description": "utmp.h (BSD):  Logging In and Out."
    },
    "longjmp": {
      "return type": "void",
      "arguments": [
        "jmp_buf state",
        "int value"
      ],
      "description": "setjmp.h (ISO):  Details of Non-Local Exits."
    },
    "lrand48": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "lrand48_r": {
      "return type": "int",
      "arguments": [
        "struct drand48_data *buffer",
        "long int *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "lrint": {
      "return type": "long int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lrintf": {
      "return type": "long int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lrintl": {
      "return type": "long int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lround": {
      "return type": "long int",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lroundf": {
      "return type": "long int",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lroundl": {
      "return type": "long int",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "lsearch": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "void *base",
        "size_t *nmemb",
        "size_t size",
        "comparison_fn_t compar"
      ],
      "description": "search.h (SVID):  Array Search Function."
    },
    "lseek": {
      "return type": "off_t",
      "arguments": [
        "int filedes",
        "off_t offset",
        "int whence"
      ],
      "description": "unistd.h (POSIX.1):  Setting the File Position of a Descriptor."
    },
    "lseek64": {
      "return type": "off64_t",
      "arguments": [
        "int filedes",
        "off64_t offset",
        "int whence"
      ],
      "description": "unistd.h (Unix98):  Setting the File Position of a Descriptor."
    },
    "lstat": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "struct stat *buf"
      ],
      "description": "sys/stat.h (BSD):  Reading the Attributes of a File."
    },
    "lstat64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "struct stat64 *buf"
      ],
      "description": "sys/stat.h (Unix98):  Reading the Attributes of a File."
    },
    "lutimes": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const struct timeval tvp[2]"
      ],
      "description": "sys/time.h (BSD):  File Times."
    },
    "madvise": {
      "return type": "int",
      "arguments": [
        "void *addr",
        "size_t length",
        "int advice"
      ],
      "description": "sys/mman.h (POSIX):  Memory-mapped I/O."
    },
    "(*func)": {
      "return type": "void makecontext (ucontext_t *ucp, void",
      "arguments": [
        "ucontext_t *ucp",
        "void (*func) (void)",
        "int argc",
        "…"
      ],
      "description": "ucontext.h (SVID):  Complete Context Control."
    },
    "mallinfo": {
      "return type": "struct mallinfo",
      "arguments": [
        "void"
      ],
      "description": "malloc.h (SVID):  Statistics for Memory Allocation with malloc."
    },
    "malloc": {
      "return type": "void *",
      "arguments": [
        "size_t size"
      ],
      "description": "malloc.h, stdlib.h (ISO):  Basic Memory Allocation."
    },
    "mblen": {
      "return type": "int",
      "arguments": [
        "const char *string",
        "size_t size"
      ],
      "description": "stdlib.h (ISO):  Non-reentrant Conversion of Single Characters."
    },
    "mbrlen": {
      "return type": "size_t",
      "arguments": [
        "const char *restrict s",
        "size_t n",
        "mbstate_t *ps"
      ],
      "description": "wchar.h (ISO):  Converting Single Characters."
    },
    "mbrtowc": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *restrict pwc",
        "const char *restrict s",
        "size_t n",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (ISO):  Converting Single Characters."
    },
    "mbsinit": {
      "return type": "int",
      "arguments": [
        "const mbstate_t *ps"
      ],
      "description": "wchar.h (ISO):  Representing the state of the conversion."
    },
    "mbsnrtowcs": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *restrict dst",
        "const char **restrict src",
        "size_t nmc",
        "size_t len",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (GNU):  Converting Multibyte and Wide Character Strings."
    },
    "mbsrtowcs": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *restrict dst",
        "const char **restrict src",
        "size_t len",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (ISO):  Converting Multibyte and Wide Character Strings."
    },
    "mbstowcs": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *wstring",
        "const char *string",
        "size_t size"
      ],
      "description": "stdlib.h (ISO):  Non-reentrant Conversion of Strings."
    },
    "mbtowc": {
      "return type": "int",
      "arguments": [
        "wchar_t *restrict result",
        "const char *restrict string",
        "size_t size"
      ],
      "description": "stdlib.h (ISO):  Non-reentrant Conversion of Single Characters."
    },
    "(*abortfn)": {
      "return type": "int mcheck (void",
      "arguments": [
        "void (*abortfn) (enum mcheck_status status)"
      ],
      "description": "mcheck.h (GNU):  Heap Consistency Checking."
    },
    "memalign": {
      "return type": "void *",
      "arguments": [
        "size_t boundary",
        "size_t size"
      ],
      "description": "malloc.h (BSD):  Allocating Aligned Memory Blocks."
    },
    "memccpy": {
      "return type": "void *",
      "arguments": [
        "void *restrict to",
        "const void *restrict from",
        "int c",
        "size_t size"
      ],
      "description": "string.h (SVID):  Copying and Concatenation."
    },
    "memchr": {
      "return type": "void *",
      "arguments": [
        "const void *block",
        "int c",
        "size_t size"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "memcmp": {
      "return type": "int",
      "arguments": [
        "const void *a1",
        "const void *a2",
        "size_t size"
      ],
      "description": "string.h (ISO):  String/Array Comparison."
    },
    "memcpy": {
      "return type": "void *",
      "arguments": [
        "void *restrict to",
        "const void *restrict from",
        "size_t size"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "memfrob": {
      "return type": "void *",
      "arguments": [
        "void *mem",
        "size_t length"
      ],
      "description": "string.h (GNU):  Trivial Encryption."
    },
    "memmem": {
      "return type": "void *",
      "arguments": [
        "const void *haystack",
        "size_t haystack-len",
        "const void *needle",
        "size_t needle-len"
      ],
      "description": "string.h (GNU):  Search Functions."
    },
    "memmove": {
      "return type": "void *",
      "arguments": [
        "void *to",
        "const void *from",
        "size_t size"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "mempcpy": {
      "return type": "void *",
      "arguments": [
        "void *restrict to",
        "const void *restrict from",
        "size_t size"
      ],
      "description": "string.h (GNU):  Copying and Concatenation."
    },
    "memrchr": {
      "return type": "void *",
      "arguments": [
        "const void *block",
        "int c",
        "size_t size"
      ],
      "description": "string.h (GNU):  Search Functions."
    },
    "memset": {
      "return type": "void *",
      "arguments": [
        "void *block",
        "int c",
        "size_t size"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "mkdir": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode"
      ],
      "description": "sys/stat.h (POSIX.1):  Creating Directories."
    },
    "mkdtemp": {
      "return type": "char *",
      "arguments": [
        "char *template"
      ],
      "description": "stdlib.h (BSD):  Temporary Files."
    },
    "mkfifo": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode"
      ],
      "description": "sys/stat.h (POSIX.1):  FIFO Special Files."
    },
    "mknod": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "mode_t mode",
        "dev_t dev"
      ],
      "description": "sys/stat.h (BSD):  Making Special Files."
    },
    "mkstemp": {
      "return type": "int",
      "arguments": [
        "char *template"
      ],
      "description": "stdlib.h (BSD):  Temporary Files."
    },
    "mktemp": {
      "return type": "char *",
      "arguments": [
        "char *template"
      ],
      "description": "stdlib.h (Unix):  Temporary Files."
    },
    "mktime": {
      "return type": "time_t",
      "arguments": [
        "struct tm *brokentime"
      ],
      "description": "time.h (ISO):  Broken-down Time."
    },
    "mlock": {
      "return type": "int",
      "arguments": [
        "const void *addr",
        "size_t len"
      ],
      "description": "sys/mman.h (POSIX.1b):  Functions To Lock And Unlock Pages."
    },
    "mlockall": {
      "return type": "int",
      "arguments": [
        "int flags"
      ],
      "description": "sys/mman.h (POSIX.1b):  Functions To Lock And Unlock Pages."
    },
    "mmap": {
      "return type": "void *",
      "arguments": [
        "void *address",
        "size_t length",
        "int protect",
        "int flags",
        "int filedes",
        "off_t offset"
      ],
      "description": "sys/mman.h (POSIX):  Memory-mapped I/O."
    },
    "mmap64": {
      "return type": "void *",
      "arguments": [
        "void *address",
        "size_t length",
        "int protect",
        "int flags",
        "int filedes",
        "off64_t offset"
      ],
      "description": "sys/mman.h (LFS):  Memory-mapped I/O."
    },
    "modf": {
      "return type": "double",
      "arguments": [
        "double value",
        "double *integer-part"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "modff": {
      "return type": "float",
      "arguments": [
        "float value",
        "float *integer-part"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "modfl": {
      "return type": "long double",
      "arguments": [
        "long double value",
        "long double *integer-part"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "mount": {
      "return type": "int",
      "arguments": [
        "const char *special_file",
        "const char *dir",
        "const char *fstype",
        "unsigned long int options",
        "const void *data"
      ],
      "description": "sys/mount.h (SVID, BSD):  Mount, Unmount, Remount."
    },
    "mrand48": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "mrand48_r": {
      "return type": "int",
      "arguments": [
        "struct drand48_data *buffer",
        "long int *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "mremap": {
      "return type": "void *",
      "arguments": [
        "void *address",
        "size_t length",
        "size_t new_length",
        "int flag"
      ],
      "description": "sys/mman.h (GNU):  Memory-mapped I/O."
    },
    "msync": {
      "return type": "int",
      "arguments": [
        "void *address",
        "size_t length",
        "int flags"
      ],
      "description": "sys/mman.h (POSIX):  Memory-mapped I/O."
    },
    "mtrace": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "mcheck.h (GNU):  How to install the tracing functionality."
    },
    "munlock": {
      "return type": "int",
      "arguments": [
        "const void *addr",
        "size_t len"
      ],
      "description": "sys/mman.h (POSIX.1b):  Functions To Lock And Unlock Pages."
    },
    "munlockall": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "sys/mman.h (POSIX.1b):  Functions To Lock And Unlock Pages."
    },
    "munmap": {
      "return type": "int",
      "arguments": [
        "void *addr",
        "size_t length"
      ],
      "description": "sys/mman.h (POSIX):  Memory-mapped I/O."
    },
    "muntrace": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "mcheck.h (GNU):  How to install the tracing functionality."
    },
    "nan": {
      "return type": "double",
      "arguments": [
        "const char *tagp"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nanf": {
      "return type": "float",
      "arguments": [
        "const char *tagp"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nanl": {
      "return type": "long double",
      "arguments": [
        "const char *tagp"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nanosleep": {
      "return type": "int",
      "arguments": [
        "const struct timespec *requested_time",
        "struct timespec *remaining"
      ],
      "description": "time.h (POSIX.1):  Sleeping."
    },
    "nearbyint": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "nearbyintf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "nearbyintl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "nextafter": {
      "return type": "double",
      "arguments": [
        "double x",
        "double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nextafterf": {
      "return type": "float",
      "arguments": [
        "float x",
        "float y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nextafterl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nexttoward": {
      "return type": "double",
      "arguments": [
        "double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nexttowardf": {
      "return type": "float",
      "arguments": [
        "float x",
        "long double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nexttowardl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long double y"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "nftw": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "__nftw_func_t func",
        "int descriptors",
        "int flag"
      ],
      "description": "ftw.h (XPG4.2):  Working with Directory Trees."
    },
    "nftw64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "__nftw64_func_t func",
        "int descriptors",
        "int flag"
      ],
      "description": "ftw.h (Unix98):  Working with Directory Trees."
    },
    "ngettext": {
      "return type": "char *",
      "arguments": [
        "const char *msgid1",
        "const char *msgid2",
        "unsigned long int n"
      ],
      "description": "libintl.h (GNU):  Additional functions for more complicated situations."
    },
    "nice": {
      "return type": "int",
      "arguments": [
        "int increment"
      ],
      "description": "unistd.h (BSD):  Functions For Traditional Scheduling."
    },
    "nl_langinfo": {
      "return type": "char *",
      "arguments": [
        "nl_item item"
      ],
      "description": "langinfo.h (XOPEN):  Pinpoint Access to Locale Data."
    },
    "nrand48": {
      "return type": "long int",
      "arguments": [
        "unsigned short int xsubi[3]"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "nrand48_r": {
      "return type": "int",
      "arguments": [
        "unsigned short int xsubi[3]",
        "struct drand48_data *buffer",
        "long int *result"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "ntohl": {
      "return type": "uint32_t",
      "arguments": [
        "uint32_t netlong"
      ],
      "description": "netinet/in.h (BSD):  Byte Order Conversion."
    },
    "ntohs": {
      "return type": "uint16_t",
      "arguments": [
        "uint16_t netshort"
      ],
      "description": "netinet/in.h (BSD):  Byte Order Conversion."
    },
    "ntp_adjtime": {
      "return type": "int",
      "arguments": [
        "struct timex *tptr"
      ],
      "description": "sys/timex.h (GNU):  High Accuracy Clock."
    },
    "ntp_gettime": {
      "return type": "int",
      "arguments": [
        "struct ntptimeval *tptr"
      ],
      "description": "sys/timex.h (GNU):  High Accuracy Clock."
    },
    "obstack_1grow": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "char c"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_1grow_fast": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "char c"
      ],
      "description": "obstack.h (GNU):  Extra Fast Growing Objects."
    },
    "obstack_alignment_mask": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Alignment of Data in Obstacks."
    },
    "obstack_alloc": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr",
        "int size"
      ],
      "description": "obstack.h (GNU):  Allocation in an Obstack."
    },
    "obstack_base": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Status of an Obstack."
    },
    "obstack_blank": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "int size"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_blank_fast": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "int size"
      ],
      "description": "obstack.h (GNU):  Extra Fast Growing Objects."
    },
    "obstack_chunk_size": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Obstack Chunks."
    },
    "obstack_copy": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *address",
        "int size"
      ],
      "description": "obstack.h (GNU):  Allocation in an Obstack."
    },
    "obstack_copy0": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *address",
        "int size"
      ],
      "description": "obstack.h (GNU):  Allocation in an Obstack."
    },
    "obstack_finish": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_free": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *object"
      ],
      "description": "obstack.h (GNU):  Freeing Objects in an Obstack."
    },
    "obstack_grow": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *data",
        "int size"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_grow0": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *data",
        "int size"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_init": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Preparing for Using Obstacks."
    },
    "obstack_int_grow": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "int data"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_int_grow_fast": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "int data"
      ],
      "description": "obstack.h (GNU):  Extra Fast Growing Objects."
    },
    "obstack_next_free": {
      "return type": "void *",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Status of an Obstack."
    },
    "obstack_object_size": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Status of an Obstack."
    },
    "obstack_printf": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (GNU):  Dynamically Allocating Formatted Output."
    },
    "obstack_ptr_grow": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *data"
      ],
      "description": "obstack.h (GNU):  Growing Objects."
    },
    "obstack_ptr_grow_fast": {
      "return type": "void",
      "arguments": [
        "struct obstack *obstack-ptr",
        "void *data"
      ],
      "description": "obstack.h (GNU):  Extra Fast Growing Objects."
    },
    "obstack_room": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack-ptr"
      ],
      "description": "obstack.h (GNU):  Extra Fast Growing Objects."
    },
    "obstack_vprintf": {
      "return type": "int",
      "arguments": [
        "struct obstack *obstack",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (GNU):  Variable Arguments Output Functions."
    },
    "offsetof": {
      "return type": "size_t",
      "arguments": [
        "type",
        "member"
      ],
      "description": "stddef.h (ISO):  Structure Field Offset Measurement."
    },
    "open": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "int flags[",
        "mode_t mode]"
      ],
      "description": "fcntl.h (POSIX.1):  Opening and Closing Files."
    },
    "open64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "int flags[",
        "mode_t mode]"
      ],
      "description": "fcntl.h (Unix98):  Opening and Closing Files."
    },
    "opendir": {
      "return type": "DIR *",
      "arguments": [
        "const char *dirname"
      ],
      "description": "dirent.h (POSIX.1):  Opening a Directory Stream."
    },
    "openlog": {
      "return type": "void",
      "arguments": [
        "const char *ident",
        "int option",
        "int facility"
      ],
      "description": "syslog.h (BSD):  openlog."
    },
    "open_memstream": {
      "return type": "FILE *",
      "arguments": [
        "char **ptr",
        "size_t *sizeloc"
      ],
      "description": "stdio.h (GNU):  String Streams."
    },
    "openpty": {
      "return type": "int",
      "arguments": [
        "int *amaster",
        "int *aslave",
        "char *name",
        "const struct termios *termp",
        "const struct winsize *winp"
      ],
      "description": "pty.h (BSD):  Opening a Pseudo-Terminal Pair."
    },
    "parse_printf_format": {
      "return type": "size_t",
      "arguments": [
        "const char *template",
        "size_t n",
        "int *argtypes"
      ],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "pathconf": {
      "return type": "long int",
      "arguments": [
        "const char *filename",
        "int parameter"
      ],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "pause": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Using pause."
    },
    "pclose": {
      "return type": "int",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX.2, SVID, BSD):  Pipe to a Subprocess."
    },
    "perror": {
      "return type": "void",
      "arguments": [
        "const char *message"
      ],
      "description": "stdio.h (ISO):  Error Messages."
    },
    "pipe": {
      "return type": "int",
      "arguments": [
        "int filedes[2]"
      ],
      "description": "unistd.h (POSIX.1):  Creating a Pipe."
    },
    "popen": {
      "return type": "FILE *",
      "arguments": [
        "const char *command",
        "const char *mode"
      ],
      "description": "stdio.h (POSIX.2, SVID, BSD):  Pipe to a Subprocess."
    },
    "posix_memalign": {
      "return type": "int",
      "arguments": [
        "void **memptr",
        "size_t alignment",
        "size_t size"
      ],
      "description": "stdlib.h (POSIX):  Allocating Aligned Memory Blocks."
    },
    "pow": {
      "return type": "double",
      "arguments": [
        "double base",
        "double power"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "pow10": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "pow10f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "pow10l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (GNU):  Exponentiation and Logarithms."
    },
    "powf": {
      "return type": "float",
      "arguments": [
        "float base",
        "float power"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "powl": {
      "return type": "long double",
      "arguments": [
        "long double base",
        "long double power"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "pread": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "void *buffer",
        "size_t size",
        "off_t offset"
      ],
      "description": "unistd.h (Unix98):  Input and Output Primitives."
    },
    "pread64": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "void *buffer",
        "size_t size",
        "off64_t offset"
      ],
      "description": "unistd.h (Unix98):  Input and Output Primitives."
    },
    "printf": {
      "return type": "int",
      "arguments": [
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Output Functions."
    },
    "printf_size": {
      "return type": "int",
      "arguments": [
        "FILE *fp",
        "const struct printf_info *info",
        "const void *const *args"
      ],
      "description": "printf.h (GNU):  Predefined printf Handlers."
    },
    "printf_size_info": {
      "return type": "int",
      "arguments": [
        "const struct printf_info *info",
        "size_t n",
        "int *argtypes"
      ],
      "description": "printf.h (GNU):  Predefined printf Handlers."
    },
    "psignal": {
      "return type": "void",
      "arguments": [
        "int signum",
        "const char *message"
      ],
      "description": "signal.h (BSD):  Signal Messages."
    },
    "pthread_getattr_default_np": {
      "return type": "int",
      "arguments": [
        "pthread_attr_t *attr"
      ],
      "description": "pthread.h (GNU):  Setting Process-wide defaults for thread attributes."
    },
    "*pthread_getspecific": {
      "return type": "void",
      "arguments": [
        "pthread_key_t key"
      ],
      "description": "pthread.h (POSIX):  Thread-specific Data."
    },
    "(*destructor)": {
      "return type": "int pthread_key_create (pthread_key_t *key, void",
      "arguments": [
        "pthread_key_t *key",
        "void (*destructor)(void*)"
      ],
      "description": "pthread.h (POSIX):  Thread-specific Data."
    },
    "pthread_key_delete": {
      "return type": "int",
      "arguments": [
        "pthread_key_t key"
      ],
      "description": "pthread.h (POSIX):  Thread-specific Data."
    },
    "pthread_setattr_default_np": {
      "return type": "int",
      "arguments": [
        "pthread_attr_t *attr"
      ],
      "description": "pthread.h (GNU):  Setting Process-wide defaults for thread attributes."
    },
    "pthread_setspecific": {
      "return type": "int",
      "arguments": [
        "pthread_key_t key",
        "const void *value"
      ],
      "description": "pthread.h (POSIX):  Thread-specific Data."
    },
    "ptsname": {
      "return type": "char *",
      "arguments": [
        "int filedes"
      ],
      "description": "stdlib.h (SVID, XPG4.2):  Allocating Pseudo-Terminals."
    },
    "ptsname_r": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "char *buf",
        "size_t len"
      ],
      "description": "stdlib.h (GNU):  Allocating Pseudo-Terminals."
    },
    "putc": {
      "return type": "int",
      "arguments": [
        "int c",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Simple Output by Characters or Lines."
    },
    "putchar": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "stdio.h (ISO):  Simple Output by Characters or Lines."
    },
    "putchar_unlocked": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "stdio.h (POSIX):  Simple Output by Characters or Lines."
    },
    "putc_unlocked": {
      "return type": "int",
      "arguments": [
        "int c",
        "FILE *stream"
      ],
      "description": "stdio.h (POSIX):  Simple Output by Characters or Lines."
    },
    "putenv": {
      "return type": "int",
      "arguments": [
        "char *string"
      ],
      "description": "stdlib.h (SVID):  Environment Access."
    },
    "putpwent": {
      "return type": "int",
      "arguments": [
        "const struct passwd *p",
        "FILE *stream"
      ],
      "description": "pwd.h (SVID):  Writing a User Entry."
    },
    "puts": {
      "return type": "int",
      "arguments": [
        "const char *s"
      ],
      "description": "stdio.h (ISO):  Simple Output by Characters or Lines."
    },
    "pututline": {
      "return type": "struct utmp *",
      "arguments": [
        "const struct utmp *utmp"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "pututxline": {
      "return type": "struct utmpx *",
      "arguments": [
        "const struct utmpx *utmp"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "putw": {
      "return type": "int",
      "arguments": [
        "int w",
        "FILE *stream"
      ],
      "description": "stdio.h (SVID):  Simple Output by Characters or Lines."
    },
    "putwc": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc",
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Simple Output by Characters or Lines."
    },
    "putwchar": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc"
      ],
      "description": "wchar.h (ISO):  Simple Output by Characters or Lines."
    },
    "putwchar_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc"
      ],
      "description": "wchar.h (GNU):  Simple Output by Characters or Lines."
    },
    "putwc_unlocked": {
      "return type": "wint_t",
      "arguments": [
        "wchar_t wc",
        "FILE *stream"
      ],
      "description": "wchar.h (GNU):  Simple Output by Characters or Lines."
    },
    "pwrite": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "const void *buffer",
        "size_t size",
        "off_t offset"
      ],
      "description": "unistd.h (Unix98):  Input and Output Primitives."
    },
    "pwrite64": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "const void *buffer",
        "size_t size",
        "off64_t offset"
      ],
      "description": "unistd.h (Unix98):  Input and Output Primitives."
    },
    "qecvt": {
      "return type": "char *",
      "arguments": [
        "long double value",
        "int ndigit",
        "int *decpt",
        "int *neg"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "qecvt_r": {
      "return type": "int",
      "arguments": [
        "long double value",
        "int ndigit",
        "int *decpt",
        "int *neg",
        "char *buf",
        "size_t len"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "qfcvt": {
      "return type": "char *",
      "arguments": [
        "long double value",
        "int ndigit",
        "int *decpt",
        "int *neg"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "qfcvt_r": {
      "return type": "int",
      "arguments": [
        "long double value",
        "int ndigit",
        "int *decpt",
        "int *neg",
        "char *buf",
        "size_t len"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "qgcvt": {
      "return type": "char *",
      "arguments": [
        "long double value",
        "int ndigit",
        "char *buf"
      ],
      "description": "stdlib.h (GNU):  Old-fashioned System V number-to-string functions."
    },
    "qsort": {
      "return type": "void",
      "arguments": [
        "void *array",
        "size_t count",
        "size_t size",
        "comparison_fn_t compare"
      ],
      "description": "stdlib.h (ISO):  Array Sort Function."
    },
    "raise": {
      "return type": "int",
      "arguments": [
        "int signum"
      ],
      "description": "signal.h (ISO):  Signaling Yourself."
    },
    "rand": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (ISO):  ISO C Random Number Functions."
    },
    "random": {
      "return type": "long int",
      "arguments": [
        "void"
      ],
      "description": "stdlib.h (BSD):  BSD Random Number Functions."
    },
    "random_r": {
      "return type": "int",
      "arguments": [
        "struct random_data *restrict buf",
        "int32_t *restrict result"
      ],
      "description": "stdlib.h (GNU):  BSD Random Number Functions."
    },
    "rand_r": {
      "return type": "int",
      "arguments": [
        "unsigned int *seed"
      ],
      "description": "stdlib.h (POSIX.1):  ISO C Random Number Functions."
    },
    "rawmemchr": {
      "return type": "void *",
      "arguments": [
        "const void *block",
        "int c"
      ],
      "description": "string.h (GNU):  Search Functions."
    },
    "read": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "void *buffer",
        "size_t size"
      ],
      "description": "unistd.h (POSIX.1):  Input and Output Primitives."
    },
    "readdir": {
      "return type": "struct dirent *",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (POSIX.1):  Reading and Closing a Directory Stream."
    },
    "readdir64": {
      "return type": "struct dirent64 *",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (LFS):  Reading and Closing a Directory Stream."
    },
    "readdir64_r": {
      "return type": "int",
      "arguments": [
        "DIR *dirstream",
        "struct dirent64 *entry",
        "struct dirent64 **result"
      ],
      "description": "dirent.h (LFS):  Reading and Closing a Directory Stream."
    },
    "readdir_r": {
      "return type": "int",
      "arguments": [
        "DIR *dirstream",
        "struct dirent *entry",
        "struct dirent **result"
      ],
      "description": "dirent.h (GNU):  Reading and Closing a Directory Stream."
    },
    "readlink": {
      "return type": "ssize_t",
      "arguments": [
        "const char *filename",
        "char *buffer",
        "size_t size"
      ],
      "description": "unistd.h (BSD):  Symbolic Links."
    },
    "readv": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "const struct iovec *vector",
        "int count"
      ],
      "description": "sys/uio.h (BSD):  Fast Scatter-Gather I/O."
    },
    "realloc": {
      "return type": "void *",
      "arguments": [
        "void *ptr",
        "size_t newsize"
      ],
      "description": "malloc.h, stdlib.h (ISO):  Changing the Size of a Block."
    },
    "realpath": {
      "return type": "char *",
      "arguments": [
        "const char *restrict name",
        "char *restrict resolved"
      ],
      "description": "stdlib.h (XPG):  Symbolic Links."
    },
    "recv": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "void *buffer",
        "size_t size",
        "int flags"
      ],
      "description": "sys/socket.h (BSD):  Receiving Data."
    },
    "recvfrom": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "void *buffer",
        "size_t size",
        "int flags",
        "struct sockaddr *addr",
        "socklen_t *length-ptr"
      ],
      "description": "sys/socket.h (BSD):  Receiving Datagrams."
    },
    "recvmsg": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "struct msghdr *message",
        "int flags"
      ],
      "description": "sys/socket.h (BSD):  Receiving Datagrams."
    },
    "regcomp": {
      "return type": "int",
      "arguments": [
        "regex_t *restrict compiled",
        "const char *restrict pattern",
        "int cflags"
      ],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "regerror": {
      "return type": "size_t",
      "arguments": [
        "int errcode",
        "const regex_t *restrict compiled",
        "char *restrict buffer",
        "size_t length"
      ],
      "description": "regex.h (POSIX.2):  POSIX Regexp Matching Cleanup."
    },
    "regexec": {
      "return type": "int",
      "arguments": [
        "const regex_t *restrict compiled",
        "const char *restrict string",
        "size_t nmatch",
        "regmatch_t matchptr[restrict]",
        "int eflags"
      ],
      "description": "regex.h (POSIX.2):  Matching a Compiled POSIX Regular Expression."
    },
    "regfree": {
      "return type": "void",
      "arguments": [
        "regex_t *compiled"
      ],
      "description": "regex.h (POSIX.2):  POSIX Regexp Matching Cleanup."
    },
    "register_printf_function": {
      "return type": "int",
      "arguments": [
        "int spec",
        "printf_function handler-function",
        "printf_arginfo_function arginfo-function"
      ],
      "description": "printf.h (GNU):  Registering New Conversions."
    },
    "remainder": {
      "return type": "double",
      "arguments": [
        "double numerator",
        "double denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "remainderf": {
      "return type": "float",
      "arguments": [
        "float numerator",
        "float denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "remainderl": {
      "return type": "long double",
      "arguments": [
        "long double numerator",
        "long double denominator"
      ],
      "description": "math.h (BSD):  Remainder Functions."
    },
    "remove": {
      "return type": "int",
      "arguments": [
        "const char *filename"
      ],
      "description": "stdio.h (ISO):  Deleting Files."
    },
    "rename": {
      "return type": "int",
      "arguments": [
        "const char *oldname",
        "const char *newname"
      ],
      "description": "stdio.h (ISO):  Renaming Files."
    },
    "rewind": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  File Positioning."
    },
    "rewinddir": {
      "return type": "void",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (POSIX.1):  Random Access in a Directory Stream."
    },
    "rindex": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "int c"
      ],
      "description": "string.h (BSD):  Search Functions."
    },
    "rint": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "rintf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "rintl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "rmdir": {
      "return type": "int",
      "arguments": [
        "const char *filename"
      ],
      "description": "unistd.h (POSIX.1):  Deleting Files."
    },
    "round": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "roundf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "roundl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "rpmatch": {
      "return type": "int",
      "arguments": [
        "const char *response"
      ],
      "description": "stdlib.h (stdlib.h):  Yes-or-No Questions."
    },
    "*sbrk": {
      "return type": "void",
      "arguments": [
        "ptrdiff_t delta"
      ],
      "description": "unistd.h (BSD):  Resizing the Data Segment."
    },
    "scalb": {
      "return type": "double",
      "arguments": [
        "double value",
        "double exponent"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbf": {
      "return type": "float",
      "arguments": [
        "float value",
        "float exponent"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbl": {
      "return type": "long double",
      "arguments": [
        "long double value",
        "long double exponent"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbln": {
      "return type": "double",
      "arguments": [
        "double x",
        "long int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalblnf": {
      "return type": "float",
      "arguments": [
        "float x",
        "long int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalblnl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "long int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbn": {
      "return type": "double",
      "arguments": [
        "double x",
        "int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbnf": {
      "return type": "float",
      "arguments": [
        "float x",
        "int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "scalbnl": {
      "return type": "long double",
      "arguments": [
        "long double x",
        "int n"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "(*cmp)": {
      "return type": "int scandir64 (const char *dir, struct dirent64 ***namelist, int (*selector) (const struct dirent64 *), int",
      "arguments": [
        "const char *dir",
        "struct dirent64 ***namelist",
        "int (*selector) (const struct dirent64 *)",
        "int (*cmp) (const struct dirent64 **",
        "const struct dirent64 **)"
      ],
      "description": "dirent.h (GNU):  Scanning the Content of a Directory."
    },
    "scanf": {
      "return type": "int",
      "arguments": [
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Input Functions."
    },
    "sched_getaffinity": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "size_t cpusetsize",
        "cpu_set_t *cpuset"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "sched_getparam": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "struct sched_param *param"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_get_priority_max": {
      "return type": "int",
      "arguments": [
        "int policy"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_get_priority_min": {
      "return type": "int",
      "arguments": [
        "int policy"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_getscheduler": {
      "return type": "int",
      "arguments": [
        "pid_t pid"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_rr_get_interval": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "struct timespec *interval"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_setaffinity": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "size_t cpusetsize",
        "const cpu_set_t *cpuset"
      ],
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "sched_setparam": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "const struct sched_param *param"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_setscheduler": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "int policy",
        "const struct sched_param *param"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "sched_yield": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "secure_getenv": {
      "return type": "char *",
      "arguments": [
        "const char *name"
      ],
      "description": "stdlib.h (GNU):  Environment Access."
    },
    "seed48": {
      "return type": "unsigned short int *",
      "arguments": [
        "unsigned short int seed16v[3]"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "seed48_r": {
      "return type": "int",
      "arguments": [
        "unsigned short int seed16v[3]",
        "struct drand48_data *buffer"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "seekdir": {
      "return type": "void",
      "arguments": [
        "DIR *dirstream",
        "long int pos"
      ],
      "description": "dirent.h (BSD):  Random Access in a Directory Stream."
    },
    "select": {
      "return type": "int",
      "arguments": [
        "int nfds",
        "fd_set *read-fds",
        "fd_set *write-fds",
        "fd_set *except-fds",
        "struct timeval *timeout"
      ],
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "send": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "const void *buffer",
        "size_t size",
        "int flags"
      ],
      "description": "sys/socket.h (BSD):  Sending Data."
    },
    "sendmsg": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "const struct msghdr *message",
        "int flags"
      ],
      "description": "sys/socket.h (BSD):  Receiving Datagrams."
    },
    "sendto": {
      "return type": "ssize_t",
      "arguments": [
        "int socket",
        "const void *buffer",
        "size_t size",
        "int flags",
        "struct sockaddr *addr",
        "socklen_t length"
      ],
      "description": "sys/socket.h (BSD):  Sending Datagrams."
    },
    "setbuf": {
      "return type": "void",
      "arguments": [
        "FILE *stream",
        "char *buf"
      ],
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "setbuffer": {
      "return type": "void",
      "arguments": [
        "FILE *stream",
        "char *buf",
        "size_t size"
      ],
      "description": "stdio.h (BSD):  Controlling Which Kind of Buffering."
    },
    "setcontext": {
      "return type": "int",
      "arguments": [
        "const ucontext_t *ucp"
      ],
      "description": "ucontext.h (SVID):  Complete Context Control."
    },
    "setdomainname": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "size_t length"
      ],
      "description": "unistd.h (???):  Host Identification."
    },
    "setegid": {
      "return type": "int",
      "arguments": [
        "gid_t newgid"
      ],
      "description": "unistd.h (POSIX.1):  Setting the Group IDs."
    },
    "setenv": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "const char *value",
        "int replace"
      ],
      "description": "stdlib.h (BSD):  Environment Access."
    },
    "seteuid": {
      "return type": "int",
      "arguments": [
        "uid_t neweuid"
      ],
      "description": "unistd.h (POSIX.1):  Setting the User ID."
    },
    "setfsent": {
      "return type": "int",
      "arguments": [
        "void"
      ],
      "description": "fstab.h (BSD):  The fstab file."
    },
    "setgid": {
      "return type": "int",
      "arguments": [
        "gid_t newgid"
      ],
      "description": "unistd.h (POSIX.1):  Setting the Group IDs."
    },
    "setgrent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "grp.h (SVID, BSD):  Scanning the List of All Groups."
    },
    "setgroups": {
      "return type": "int",
      "arguments": [
        "size_t count",
        "const gid_t *groups"
      ],
      "description": "grp.h (BSD):  Setting the Group IDs."
    },
    "sethostent": {
      "return type": "void",
      "arguments": [
        "int stayopen"
      ],
      "description": "netdb.h (BSD):  Host Names."
    },
    "sethostid": {
      "return type": "int",
      "arguments": [
        "long int id"
      ],
      "description": "unistd.h (BSD):  Host Identification."
    },
    "sethostname": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "size_t length"
      ],
      "description": "unistd.h (BSD):  Host Identification."
    },
    "setitimer": {
      "return type": "int",
      "arguments": [
        "int which",
        "const struct itimerval *new",
        "struct itimerval *old"
      ],
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "setjmp": {
      "return type": "int",
      "arguments": [
        "jmp_buf state"
      ],
      "description": "setjmp.h (ISO):  Details of Non-Local Exits."
    },
    "setkey": {
      "return type": "void",
      "arguments": [
        "const char *key"
      ],
      "description": "crypt.h (BSD, SVID):  DES Encryption."
    },
    "setkey_r": {
      "return type": "void",
      "arguments": [
        "const char *key",
        "struct crypt_data * data"
      ],
      "description": "crypt.h (GNU):  DES Encryption."
    },
    "setlinebuf": {
      "return type": "void",
      "arguments": [
        "FILE *stream"
      ],
      "description": "stdio.h (BSD):  Controlling Which Kind of Buffering."
    },
    "setlocale": {
      "return type": "char *",
      "arguments": [
        "int category",
        "const char *locale"
      ],
      "description": "locale.h (ISO):  How Programs Set the Locale."
    },
    "setlogmask": {
      "return type": "int",
      "arguments": [
        "int mask"
      ],
      "description": "syslog.h (BSD):  setlogmask."
    },
    "setmntent": {
      "return type": "FILE *",
      "arguments": [
        "const char *file",
        "const char *mode"
      ],
      "description": "mntent.h (BSD):  The mtab file."
    },
    "setnetent": {
      "return type": "void",
      "arguments": [
        "int stayopen"
      ],
      "description": "netdb.h (BSD):  Networks Database."
    },
    "setnetgrent": {
      "return type": "int",
      "arguments": [
        "const char *netgroup"
      ],
      "description": "netdb.h (BSD):  Looking up one Netgroup."
    },
    "setpgid": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "pid_t pgid"
      ],
      "description": "unistd.h (POSIX.1):  Process Group Functions."
    },
    "setpgrp": {
      "return type": "int",
      "arguments": [
        "pid_t pid",
        "pid_t pgid"
      ],
      "description": "unistd.h (BSD):  Process Group Functions."
    },
    "setpriority": {
      "return type": "int",
      "arguments": [
        "int class",
        "int id",
        "int niceval"
      ],
      "description": "sys/resource.h (BSD,POSIX):  Functions For Traditional Scheduling."
    },
    "setprotoent": {
      "return type": "void",
      "arguments": [
        "int stayopen"
      ],
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "setpwent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "pwd.h (SVID, BSD):  Scanning the List of All Users."
    },
    "setregid": {
      "return type": "int",
      "arguments": [
        "gid_t rgid",
        "gid_t egid"
      ],
      "description": "unistd.h (BSD):  Setting the Group IDs."
    },
    "setreuid": {
      "return type": "int",
      "arguments": [
        "uid_t ruid",
        "uid_t euid"
      ],
      "description": "unistd.h (BSD):  Setting the User ID."
    },
    "setrlimit": {
      "return type": "int",
      "arguments": [
        "int resource",
        "const struct rlimit *rlp"
      ],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "setrlimit64": {
      "return type": "int",
      "arguments": [
        "int resource",
        "const struct rlimit64 *rlp"
      ],
      "description": "sys/resource.h (Unix98):  Limiting Resource Usage."
    },
    "setservent": {
      "return type": "void",
      "arguments": [
        "int stayopen"
      ],
      "description": "netdb.h (BSD):  The Services Database."
    },
    "setsid": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (POSIX.1):  Process Group Functions."
    },
    "setsockopt": {
      "return type": "int",
      "arguments": [
        "int socket",
        "int level",
        "int optname",
        "const void *optval",
        "socklen_t optlen"
      ],
      "description": "sys/socket.h (BSD):  Socket Option Functions."
    },
    "setstate": {
      "return type": "char *",
      "arguments": [
        "char *state"
      ],
      "description": "stdlib.h (BSD):  BSD Random Number Functions."
    },
    "setstate_r": {
      "return type": "int",
      "arguments": [
        "char *restrict statebuf",
        "struct random_data *restrict buf"
      ],
      "description": "stdlib.h (GNU):  BSD Random Number Functions."
    },
    "settimeofday": {
      "return type": "int",
      "arguments": [
        "const struct timeval *tp",
        "const struct timezone *tzp"
      ],
      "description": "sys/time.h (BSD):  High-Resolution Calendar."
    },
    "setuid": {
      "return type": "int",
      "arguments": [
        "uid_t newuid"
      ],
      "description": "unistd.h (POSIX.1):  Setting the User ID."
    },
    "setutent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "setutxent": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "setvbuf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "char *buf",
        "int mode",
        "size_t size"
      ],
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "shm_open": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "int oflag",
        "mode_t mode"
      ],
      "description": "sys/mman.h (POSIX):  Memory-mapped I/O."
    },
    "shutdown": {
      "return type": "int",
      "arguments": [
        "int socket",
        "int how"
      ],
      "description": "sys/socket.h (BSD):  Closing a Socket."
    },
    "sigaction": {
      "return type": "int",
      "arguments": [
        "int signum",
        "const struct sigaction *restrict action",
        "struct sigaction *restrict old-action"
      ],
      "description": "signal.h (POSIX.1):  Advanced Signal Handling."
    },
    "sigaddset": {
      "return type": "int",
      "arguments": [
        "sigset_t *set",
        "int signum"
      ],
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "sigaltstack": {
      "return type": "int",
      "arguments": [
        "const stack_t *restrict stack",
        "stack_t *restrict oldstack"
      ],
      "description": "signal.h (XPG):  Using a Separate Signal Stack."
    },
    "sigblock": {
      "return type": "int",
      "arguments": [
        "int mask"
      ],
      "description": "signal.h (BSD):  BSD Signal Handling."
    },
    "sigdelset": {
      "return type": "int",
      "arguments": [
        "sigset_t *set",
        "int signum"
      ],
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "sigemptyset": {
      "return type": "int",
      "arguments": [
        "sigset_t *set"
      ],
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "sigfillset": {
      "return type": "int",
      "arguments": [
        "sigset_t *set"
      ],
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "siginterrupt": {
      "return type": "int",
      "arguments": [
        "int signum",
        "int failflag"
      ],
      "description": "signal.h (XPG):  BSD Signal Handling."
    },
    "sigismember": {
      "return type": "int",
      "arguments": [
        "const sigset_t *set",
        "int signum"
      ],
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "siglongjmp": {
      "return type": "void",
      "arguments": [
        "sigjmp_buf state",
        "int value"
      ],
      "description": "setjmp.h (POSIX.1):  Non-Local Exits and Signals."
    },
    "sigmask": {
      "return type": "int",
      "arguments": [
        "int signum"
      ],
      "description": "signal.h (BSD):  BSD Signal Handling."
    },
    "signal": {
      "return type": "sighandler_t",
      "arguments": [
        "int signum",
        "sighandler_t action"
      ],
      "description": "signal.h (ISO):  Basic Signal Handling."
    },
    "signbit": {
      "return type": "int",
      "arguments": [
        "float-type x"
      ],
      "description": "math.h (ISO):  Setting and modifying single bits of FP values."
    },
    "significand": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "significandf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "significandl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (BSD):  Normalization Functions."
    },
    "sigpause": {
      "return type": "int",
      "arguments": [
        "int mask"
      ],
      "description": "signal.h (BSD):  BSD Signal Handling."
    },
    "sigpending": {
      "return type": "int",
      "arguments": [
        "sigset_t *set"
      ],
      "description": "signal.h (POSIX.1):  Checking for Pending Signals."
    },
    "sigprocmask": {
      "return type": "int",
      "arguments": [
        "int how",
        "const sigset_t *restrict set",
        "sigset_t *restrict oldset"
      ],
      "description": "signal.h (POSIX.1):  Process Signal Mask."
    },
    "sigsetjmp": {
      "return type": "int",
      "arguments": [
        "sigjmp_buf state",
        "int savesigs"
      ],
      "description": "setjmp.h (POSIX.1):  Non-Local Exits and Signals."
    },
    "sigsetmask": {
      "return type": "int",
      "arguments": [
        "int mask"
      ],
      "description": "signal.h (BSD):  BSD Signal Handling."
    },
    "sigstack": {
      "return type": "int",
      "arguments": [
        "struct sigstack *stack",
        "struct sigstack *oldstack"
      ],
      "description": "signal.h (BSD):  Using a Separate Signal Stack."
    },
    "sigsuspend": {
      "return type": "int",
      "arguments": [
        "const sigset_t *set"
      ],
      "description": "signal.h (POSIX.1):  Using sigsuspend."
    },
    "sin": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "sincos": {
      "return type": "void",
      "arguments": [
        "double x",
        "double *sinx",
        "double *cosx"
      ],
      "description": "math.h (GNU):  Trigonometric Functions."
    },
    "sincosf": {
      "return type": "void",
      "arguments": [
        "float x",
        "float *sinx",
        "float *cosx"
      ],
      "description": "math.h (GNU):  Trigonometric Functions."
    },
    "sincosl": {
      "return type": "void",
      "arguments": [
        "long double x",
        "long double *sinx",
        "long double *cosx"
      ],
      "description": "math.h (GNU):  Trigonometric Functions."
    },
    "sinf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "sinh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "sinhf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "sinhl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "sinl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "S_ISBLK": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_ISCHR": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_ISDIR": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_ISFIFO": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_ISLNK": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (GNU):  Testing the Type of a File."
    },
    "S_ISREG": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_ISSOCK": {
      "return type": "int",
      "arguments": [
        "mode_t m"
      ],
      "description": "sys/stat.h (GNU):  Testing the Type of a File."
    },
    "sleep": {
      "return type": "unsigned int",
      "arguments": [
        "unsigned int seconds"
      ],
      "description": "unistd.h (POSIX.1):  Sleeping."
    },
    "snprintf": {
      "return type": "int",
      "arguments": [
        "char *s",
        "size_t size",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (GNU):  Formatted Output Functions."
    },
    "socket": {
      "return type": "int",
      "arguments": [
        "int namespace",
        "int style",
        "int protocol"
      ],
      "description": "sys/socket.h (BSD):  Creating a Socket."
    },
    "socketpair": {
      "return type": "int",
      "arguments": [
        "int namespace",
        "int style",
        "int protocol",
        "int filedes[2]"
      ],
      "description": "sys/socket.h (BSD):  Socket Pairs."
    },
    "sprintf": {
      "return type": "int",
      "arguments": [
        "char *s",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Output Functions."
    },
    "sqrt": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "sqrtf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "sqrtl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "srand": {
      "return type": "void",
      "arguments": [
        "unsigned int seed"
      ],
      "description": "stdlib.h (ISO):  ISO C Random Number Functions."
    },
    "srand48": {
      "return type": "void",
      "arguments": [
        "long int seedval"
      ],
      "description": "stdlib.h (SVID):  SVID Random Number Function."
    },
    "srand48_r": {
      "return type": "int",
      "arguments": [
        "long int seedval",
        "struct drand48_data *buffer"
      ],
      "description": "stdlib.h (GNU):  SVID Random Number Function."
    },
    "srandom": {
      "return type": "void",
      "arguments": [
        "unsigned int seed"
      ],
      "description": "stdlib.h (BSD):  BSD Random Number Functions."
    },
    "srandom_r": {
      "return type": "int",
      "arguments": [
        "unsigned int seed",
        "struct random_data *buf"
      ],
      "description": "stdlib.h (GNU):  BSD Random Number Functions."
    },
    "sscanf": {
      "return type": "int",
      "arguments": [
        "const char *s",
        "const char *template",
        "…"
      ],
      "description": "stdio.h (ISO):  Formatted Input Functions."
    },
    "ssignal": {
      "return type": "sighandler_t",
      "arguments": [
        "int signum",
        "sighandler_t action"
      ],
      "description": "signal.h (SVID):  Basic Signal Handling."
    },
    "stat": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "struct stat *buf"
      ],
      "description": "sys/stat.h (POSIX.1):  Reading the Attributes of a File."
    },
    "stat64": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "struct stat64 *buf"
      ],
      "description": "sys/stat.h (Unix98):  Reading the Attributes of a File."
    },
    "stime": {
      "return type": "int",
      "arguments": [
        "const time_t *newtime"
      ],
      "description": "time.h (SVID, XPG):  Simple Calendar Time."
    },
    "stpcpy": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from"
      ],
      "description": "string.h (Unknown origin):  Copying and Concatenation."
    },
    "stpncpy": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from",
        "size_t size"
      ],
      "description": "string.h (GNU):  Copying and Concatenation."
    },
    "strcasecmp": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2"
      ],
      "description": "string.h (BSD):  String/Array Comparison."
    },
    "strcasestr": {
      "return type": "char *",
      "arguments": [
        "const char *haystack",
        "const char *needle"
      ],
      "description": "string.h (GNU):  Search Functions."
    },
    "strcat": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "strchr": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "int c"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strchrnul": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "int c"
      ],
      "description": "string.h (GNU):  Search Functions."
    },
    "strcmp": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2"
      ],
      "description": "string.h (ISO):  String/Array Comparison."
    },
    "strcoll": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2"
      ],
      "description": "string.h (ISO):  Collation Functions."
    },
    "strcpy": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "strcspn": {
      "return type": "size_t",
      "arguments": [
        "const char *string",
        "const char *stopset"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strdup": {
      "return type": "char *",
      "arguments": [
        "const char *s"
      ],
      "description": "string.h (SVID):  Copying and Concatenation."
    },
    "strdupa": {
      "return type": "char *",
      "arguments": [
        "const char *s"
      ],
      "description": "string.h (GNU):  Copying and Concatenation."
    },
    "strerror": {
      "return type": "char *",
      "arguments": [
        "int errnum"
      ],
      "description": "string.h (ISO):  Error Messages."
    },
    "strerror_r": {
      "return type": "char *",
      "arguments": [
        "int errnum",
        "char *buf",
        "size_t n"
      ],
      "description": "string.h (GNU):  Error Messages."
    },
    "strfry": {
      "return type": "char *",
      "arguments": [
        "char *string"
      ],
      "description": "string.h (GNU):  strfry."
    },
    "strftime": {
      "return type": "size_t",
      "arguments": [
        "char *s",
        "size_t size",
        "const char *template",
        "const struct tm *brokentime"
      ],
      "description": "time.h (ISO):  Formatting Calendar Time."
    },
    "strlen": {
      "return type": "size_t",
      "arguments": [
        "const char *s"
      ],
      "description": "string.h (ISO):  String Length."
    },
    "strncasecmp": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2",
        "size_t n"
      ],
      "description": "string.h (BSD):  String/Array Comparison."
    },
    "strncat": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from",
        "size_t size"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "strncmp": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2",
        "size_t size"
      ],
      "description": "string.h (ISO):  String/Array Comparison."
    },
    "strncpy": {
      "return type": "char *",
      "arguments": [
        "char *restrict to",
        "const char *restrict from",
        "size_t size"
      ],
      "description": "string.h (ISO):  Copying and Concatenation."
    },
    "strndup": {
      "return type": "char *",
      "arguments": [
        "const char *s",
        "size_t size"
      ],
      "description": "string.h (GNU):  Copying and Concatenation."
    },
    "strndupa": {
      "return type": "char *",
      "arguments": [
        "const char *s",
        "size_t size"
      ],
      "description": "string.h (GNU):  Copying and Concatenation."
    },
    "strnlen": {
      "return type": "size_t",
      "arguments": [
        "const char *s",
        "size_t maxlen"
      ],
      "description": "string.h (GNU):  String Length."
    },
    "strpbrk": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "const char *stopset"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strptime": {
      "return type": "char *",
      "arguments": [
        "const char *s",
        "const char *fmt",
        "struct tm *tp"
      ],
      "description": "time.h (XPG4):  Interpret string according to given format."
    },
    "strrchr": {
      "return type": "char *",
      "arguments": [
        "const char *string",
        "int c"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strsep": {
      "return type": "char *",
      "arguments": [
        "char **string_ptr",
        "const char *delimiter"
      ],
      "description": "string.h (BSD):  Finding Tokens in a String."
    },
    "strsignal": {
      "return type": "char *",
      "arguments": [
        "int signum"
      ],
      "description": "string.h (GNU):  Signal Messages."
    },
    "strspn": {
      "return type": "size_t",
      "arguments": [
        "const char *string",
        "const char *skipset"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strstr": {
      "return type": "char *",
      "arguments": [
        "const char *haystack",
        "const char *needle"
      ],
      "description": "string.h (ISO):  Search Functions."
    },
    "strtod": {
      "return type": "double",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "strtof": {
      "return type": "float",
      "arguments": [
        "const char *string",
        "char **tailptr"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "strtoimax": {
      "return type": "intmax_t",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "inttypes.h (ISO):  Parsing of Integers."
    },
    "strtok": {
      "return type": "char *",
      "arguments": [
        "char *restrict newstring",
        "const char *restrict delimiters"
      ],
      "description": "string.h (ISO):  Finding Tokens in a String."
    },
    "strtok_r": {
      "return type": "char *",
      "arguments": [
        "char *newstring",
        "const char *delimiters",
        "char **save_ptr"
      ],
      "description": "string.h (POSIX):  Finding Tokens in a String."
    },
    "strtol": {
      "return type": "long int",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "strtold": {
      "return type": "long double",
      "arguments": [
        "const char *string",
        "char **tailptr"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "strtoll": {
      "return type": "long long int",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "strtoq": {
      "return type": "long long int",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (BSD):  Parsing of Integers."
    },
    "strtoul": {
      "return type": "unsigned long int",
      "arguments": [
        "const char *retrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "strtoull": {
      "return type": "unsigned long long int",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (ISO):  Parsing of Integers."
    },
    "strtoumax": {
      "return type": "uintmax_t",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "inttypes.h (ISO):  Parsing of Integers."
    },
    "strtouq": {
      "return type": "unsigned long long int",
      "arguments": [
        "const char *restrict string",
        "char **restrict tailptr",
        "int base"
      ],
      "description": "stdlib.h (BSD):  Parsing of Integers."
    },
    "strverscmp": {
      "return type": "int",
      "arguments": [
        "const char *s1",
        "const char *s2"
      ],
      "description": "string.h (GNU):  String/Array Comparison."
    },
    "strxfrm": {
      "return type": "size_t",
      "arguments": [
        "char *restrict to",
        "const char *restrict from",
        "size_t size"
      ],
      "description": "string.h (ISO):  Collation Functions."
    },
    "stty": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "const struct sgttyb *attributes"
      ],
      "description": "sgtty.h (BSD):  BSD Terminal Modes."
    },
    "S_TYPEISMQ": {
      "return type": "int",
      "arguments": [
        "struct stat *s"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_TYPEISSEM": {
      "return type": "int",
      "arguments": [
        "struct stat *s"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "S_TYPEISSHM": {
      "return type": "int",
      "arguments": [
        "struct stat *s"
      ],
      "description": "sys/stat.h (POSIX):  Testing the Type of a File."
    },
    "SUN_LEN": {
      "return type": "int",
      "arguments": [
        "struct sockaddr_un * ptr"
      ],
      "description": "sys/un.h (BSD):  Details of Local Namespace."
    },
    "swapcontext": {
      "return type": "int",
      "arguments": [
        "ucontext_t *restrict oucp",
        "const ucontext_t *restrict ucp"
      ],
      "description": "ucontext.h (SVID):  Complete Context Control."
    },
    "swprintf": {
      "return type": "int",
      "arguments": [
        "wchar_t *s",
        "size_t size",
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (GNU):  Formatted Output Functions."
    },
    "swscanf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws",
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (ISO):  Formatted Input Functions."
    },
    "symlink": {
      "return type": "int",
      "arguments": [
        "const char *oldname",
        "const char *newname"
      ],
      "description": "unistd.h (BSD):  Symbolic Links."
    },
    "sync": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (X/Open):  Synchronizing I/O operations."
    },
    "syscall": {
      "return type": "long int",
      "arguments": [
        "long int sysno",
        "…"
      ],
      "description": "unistd.h (???):  System Calls."
    },
    "sysconf": {
      "return type": "long int",
      "arguments": [
        "int parameter"
      ],
      "description": "unistd.h (POSIX.1):  Definition of sysconf."
    },
    "sysctl": {
      "return type": "int",
      "arguments": [
        "int *names",
        "int nlen",
        "void *oldval",
        "size_t *oldlenp",
        "void *newval",
        "size_t newlen"
      ],
      "description": "sys/sysctl.h (BSD):  System Parameters."
    },
    "syslog": {
      "return type": "void",
      "arguments": [
        "int facility_priority",
        "const char *format",
        "…"
      ],
      "description": "syslog.h (BSD):  syslog, vsyslog."
    },
    "system": {
      "return type": "int",
      "arguments": [
        "const char *command"
      ],
      "description": "stdlib.h (ISO):  Running a Command."
    },
    "sysv_signal": {
      "return type": "sighandler_t",
      "arguments": [
        "int signum",
        "sighandler_t action"
      ],
      "description": "signal.h (GNU):  Basic Signal Handling."
    },
    "tan": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "tanf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "tanh": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "tanhf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "tanhl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Hyperbolic Functions."
    },
    "tanl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Trigonometric Functions."
    },
    "tcdrain": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "termios.h (POSIX.1):  Line Control Functions."
    },
    "tcflow": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int action"
      ],
      "description": "termios.h (POSIX.1):  Line Control Functions."
    },
    "tcflush": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int queue"
      ],
      "description": "termios.h (POSIX.1):  Line Control Functions."
    },
    "tcgetattr": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "struct termios *termios-p"
      ],
      "description": "termios.h (POSIX.1):  Terminal Mode Functions."
    },
    "tcgetpgrp": {
      "return type": "pid_t",
      "arguments": [
        "int filedes"
      ],
      "description": "unistd.h (POSIX.1):  Functions for Controlling Terminal Access."
    },
    "tcgetsid": {
      "return type": "pid_t",
      "arguments": [
        "int fildes"
      ],
      "description": "termios.h (Unix98):  Functions for Controlling Terminal Access."
    },
    "tcsendbreak": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int duration"
      ],
      "description": "termios.h (POSIX.1):  Line Control Functions."
    },
    "tcsetattr": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "int when",
        "const struct termios *termios-p"
      ],
      "description": "termios.h (POSIX.1):  Terminal Mode Functions."
    },
    "tcsetpgrp": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "pid_t pgid"
      ],
      "description": "unistd.h (POSIX.1):  Functions for Controlling Terminal Access."
    },
    "tdelete": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "void **rootp",
        "comparison_fn_t compar"
      ],
      "description": "search.h (SVID):  The tsearch function.."
    },
    "tdestroy": {
      "return type": "void",
      "arguments": [
        "void *vroot",
        "__free_fn_t freefct"
      ],
      "description": "search.h (GNU):  The tsearch function.."
    },
    "telldir": {
      "return type": "long int",
      "arguments": [
        "DIR *dirstream"
      ],
      "description": "dirent.h (BSD):  Random Access in a Directory Stream."
    },
    "TEMP_FAILURE_RETRY": {
      "return type": "",
      "arguments": [
        "expression"
      ],
      "description": "unistd.h (GNU):  Primitives Interrupted by Signals."
    },
    "tempnam": {
      "return type": "char *",
      "arguments": [
        "const char *dir",
        "const char *prefix"
      ],
      "description": "stdio.h (SVID):  Temporary Files."
    },
    "textdomain": {
      "return type": "char *",
      "arguments": [
        "const char *domainname"
      ],
      "description": "libintl.h (GNU):  How to determine which catalog to be used."
    },
    "tfind": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "void *const *rootp",
        "comparison_fn_t compar"
      ],
      "description": "search.h (SVID):  The tsearch function.."
    },
    "tgamma": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (XPG, ISO):  Special Functions."
    },
    "tgammaf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (XPG, ISO):  Special Functions."
    },
    "tgammal": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (XPG, ISO):  Special Functions."
    },
    "time": {
      "return type": "time_t",
      "arguments": [
        "time_t *result"
      ],
      "description": "time.h (ISO):  Simple Calendar Time."
    },
    "timegm": {
      "return type": "time_t",
      "arguments": [
        "struct tm *brokentime"
      ],
      "description": "time.h (???):  Broken-down Time."
    },
    "timelocal": {
      "return type": "time_t",
      "arguments": [
        "struct tm *brokentime"
      ],
      "description": "time.h (???):  Broken-down Time."
    },
    "times": {
      "return type": "clock_t",
      "arguments": [
        "struct tms *buffer"
      ],
      "description": "sys/times.h (POSIX.1):  Processor Time Inquiry."
    },
    "tmpfile": {
      "return type": "FILE *",
      "arguments": [
        "void"
      ],
      "description": "stdio.h (ISO):  Temporary Files."
    },
    "tmpfile64": {
      "return type": "FILE *",
      "arguments": [
        "void"
      ],
      "description": "stdio.h (Unix98):  Temporary Files."
    },
    "tmpnam": {
      "return type": "char *",
      "arguments": [
        "char *result"
      ],
      "description": "stdio.h (ISO):  Temporary Files."
    },
    "tmpnam_r": {
      "return type": "char *",
      "arguments": [
        "char *result"
      ],
      "description": "stdio.h (GNU):  Temporary Files."
    },
    "toascii": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (SVID, BSD):  Case Conversion."
    },
    "_tolower": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (SVID):  Case Conversion."
    },
    "tolower": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Case Conversion."
    },
    "_toupper": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (SVID):  Case Conversion."
    },
    "toupper": {
      "return type": "int",
      "arguments": [
        "int c"
      ],
      "description": "ctype.h (ISO):  Case Conversion."
    },
    "towctrans": {
      "return type": "wint_t",
      "arguments": [
        "wint_t wc",
        "wctrans_t desc"
      ],
      "description": "wctype.h (ISO):  Mapping of wide characters.."
    },
    "towlower": {
      "return type": "wint_t",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Mapping of wide characters.."
    },
    "towupper": {
      "return type": "wint_t",
      "arguments": [
        "wint_t wc"
      ],
      "description": "wctype.h (ISO):  Mapping of wide characters.."
    },
    "trunc": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "truncate": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "off_t length"
      ],
      "description": "unistd.h (X/Open):  File Size."
    },
    "truncate64": {
      "return type": "int",
      "arguments": [
        "const char *name",
        "off64_t length"
      ],
      "description": "unistd.h (Unix98):  File Size."
    },
    "truncf": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "truncl": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (ISO):  Rounding Functions."
    },
    "tsearch": {
      "return type": "void *",
      "arguments": [
        "const void *key",
        "void **rootp",
        "comparison_fn_t compar"
      ],
      "description": "search.h (SVID):  The tsearch function.."
    },
    "ttyname": {
      "return type": "char *",
      "arguments": [
        "int filedes"
      ],
      "description": "unistd.h (POSIX.1):  Identifying Terminals."
    },
    "ttyname_r": {
      "return type": "int",
      "arguments": [
        "int filedes",
        "char *buf",
        "size_t len"
      ],
      "description": "unistd.h (POSIX.1):  Identifying Terminals."
    },
    "twalk": {
      "return type": "void",
      "arguments": [
        "const void *root",
        "__action_fn_t action"
      ],
      "description": "search.h (SVID):  The tsearch function.."
    },
    "tzset": {
      "return type": "void",
      "arguments": [
        "void"
      ],
      "description": "time.h (POSIX.1):  Functions and Variables for Time Zones."
    },
    "ulimit": {
      "return type": "long int",
      "arguments": [
        "int cmd",
        "…"
      ],
      "description": "ulimit.h (BSD):  Limiting Resource Usage."
    },
    "umask": {
      "return type": "mode_t",
      "arguments": [
        "mode_t mask"
      ],
      "description": "sys/stat.h (POSIX.1):  Assigning File Permissions."
    },
    "umount": {
      "return type": "int",
      "arguments": [
        "const char *file"
      ],
      "description": "sys/mount.h (SVID, GNU):  Mount, Unmount, Remount."
    },
    "umount2": {
      "return type": "int",
      "arguments": [
        "const char *file",
        "int flags"
      ],
      "description": "sys/mount.h (GNU):  Mount, Unmount, Remount."
    },
    "uname": {
      "return type": "int",
      "arguments": [
        "struct utsname *info"
      ],
      "description": "sys/utsname.h (POSIX.1):  Platform Type Identification."
    },
    "ungetc": {
      "return type": "int",
      "arguments": [
        "int c",
        "FILE *stream"
      ],
      "description": "stdio.h (ISO):  Using ungetc To Do Unreading."
    },
    "ungetwc": {
      "return type": "wint_t",
      "arguments": [
        "wint_t wc",
        "FILE *stream"
      ],
      "description": "wchar.h (ISO):  Using ungetc To Do Unreading."
    },
    "unlink": {
      "return type": "int",
      "arguments": [
        "const char *filename"
      ],
      "description": "unistd.h (POSIX.1):  Deleting Files."
    },
    "unlockpt": {
      "return type": "int",
      "arguments": [
        "int filedes"
      ],
      "description": "stdlib.h (SVID, XPG4.2):  Allocating Pseudo-Terminals."
    },
    "unsetenv": {
      "return type": "int",
      "arguments": [
        "const char *name"
      ],
      "description": "stdlib.h (BSD):  Environment Access."
    },
    "updwtmp": {
      "return type": "void",
      "arguments": [
        "const char *wtmp_file",
        "const struct utmp *utmp"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "utime": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const struct utimbuf *times"
      ],
      "description": "utime.h (POSIX.1):  File Times."
    },
    "utimes": {
      "return type": "int",
      "arguments": [
        "const char *filename",
        "const struct timeval tvp[2]"
      ],
      "description": "sys/time.h (BSD):  File Times."
    },
    "utmpname": {
      "return type": "int",
      "arguments": [
        "const char *file"
      ],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "utmpxname": {
      "return type": "int",
      "arguments": [
        "const char *file"
      ],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "va_arg": {
      "return type": "type",
      "arguments": [
        "va_list ap",
        "type"
      ],
      "description": "stdarg.h (ISO):  Argument Access Macros."
    },
    "va_copy": {
      "return type": "void",
      "arguments": [
        "va_list dest",
        "va_list src"
      ],
      "description": "stdarg.h (ISO):  Argument Access Macros."
    },
    "va_end": {
      "return type": "void",
      "arguments": [
        "va_list ap"
      ],
      "description": "stdarg.h (ISO):  Argument Access Macros."
    },
    "valloc": {
      "return type": "void *",
      "arguments": [
        "size_t size"
      ],
      "description": "malloc.h, stdlib.h (BSD):  Allocating Aligned Memory Blocks."
    },
    "vasprintf": {
      "return type": "int",
      "arguments": [
        "char **ptr",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (GNU):  Variable Arguments Output Functions."
    },
    "va_start": {
      "return type": "void",
      "arguments": [
        "va_list ap",
        "last-required"
      ],
      "description": "stdarg.h (ISO):  Argument Access Macros."
    },
    "verr": {
      "return type": "void",
      "arguments": [
        "int status",
        "const char *format",
        "va_list ap"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "verrx": {
      "return type": "void",
      "arguments": [
        "int status",
        "const char *format",
        "va_list ap"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "versionsort": {
      "return type": "int",
      "arguments": [
        "const struct dirent **a",
        "const struct dirent **b"
      ],
      "description": "dirent.h (GNU):  Scanning the Content of a Directory."
    },
    "versionsort64": {
      "return type": "int",
      "arguments": [
        "const struct dirent64 **a",
        "const struct dirent64 **b"
      ],
      "description": "dirent.h (GNU):  Scanning the Content of a Directory."
    },
    "vfork": {
      "return type": "pid_t",
      "arguments": [
        "void"
      ],
      "description": "unistd.h (BSD):  Creating a Process."
    },
    "vfprintf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Output Functions."
    },
    "vfscanf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Input Functions."
    },
    "vfwprintf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (ISO):  Variable Arguments Output Functions."
    },
    "vfwscanf": {
      "return type": "int",
      "arguments": [
        "FILE *stream",
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (ISO):  Variable Arguments Input Functions."
    },
    "vlimit": {
      "return type": "int",
      "arguments": [
        "int resource",
        "int limit"
      ],
      "description": "sys/vlimit.h (BSD):  Limiting Resource Usage."
    },
    "(*error_print_progname)": {
      "return type": "void",
      "arguments": [
        "*error_print_progname) (void"
      ],
      "description": "error.h (GNU):  Error Messages."
    },
    "vprintf": {
      "return type": "int",
      "arguments": [
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Output Functions."
    },
    "vscanf": {
      "return type": "int",
      "arguments": [
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Input Functions."
    },
    "vsnprintf": {
      "return type": "int",
      "arguments": [
        "char *s",
        "size_t size",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (GNU):  Variable Arguments Output Functions."
    },
    "vsprintf": {
      "return type": "int",
      "arguments": [
        "char *s",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Output Functions."
    },
    "vsscanf": {
      "return type": "int",
      "arguments": [
        "const char *s",
        "const char *template",
        "va_list ap"
      ],
      "description": "stdio.h (ISO):  Variable Arguments Input Functions."
    },
    "vswprintf": {
      "return type": "int",
      "arguments": [
        "wchar_t *s",
        "size_t size",
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (GNU):  Variable Arguments Output Functions."
    },
    "vswscanf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *s",
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (ISO):  Variable Arguments Input Functions."
    },
    "vsyslog": {
      "return type": "void",
      "arguments": [
        "int facility_priority",
        "const char *format",
        "va_list arglist"
      ],
      "description": "syslog.h (BSD):  syslog, vsyslog."
    },
    "vtimes": {
      "return type": "int",
      "arguments": [
        "struct vtimes *current",
        "struct vtimes *child"
      ],
      "description": "sys/vtimes.h (sys/vtimes.h):  Resource Usage."
    },
    "vwarn": {
      "return type": "void",
      "arguments": [
        "const char *format",
        "va_list ap"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "vwarnx": {
      "return type": "void",
      "arguments": [
        "const char *format",
        "va_list ap"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "vwprintf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (ISO):  Variable Arguments Output Functions."
    },
    "vwscanf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *template",
        "va_list ap"
      ],
      "description": "wchar.h (ISO):  Variable Arguments Input Functions."
    },
    "wait": {
      "return type": "pid_t",
      "arguments": [
        "int *status-ptr"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion."
    },
    "wait3": {
      "return type": "pid_t",
      "arguments": [
        "union wait *status-ptr",
        "int options",
        "struct rusage *usage"
      ],
      "description": "sys/wait.h (BSD):  BSD Process Wait Functions."
    },
    "wait4": {
      "return type": "pid_t",
      "arguments": [
        "pid_t pid",
        "int *status-ptr",
        "int options",
        "struct rusage *usage"
      ],
      "description": "sys/wait.h (BSD):  Process Completion."
    },
    "waitpid": {
      "return type": "pid_t",
      "arguments": [
        "pid_t pid",
        "int *status-ptr",
        "int options"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion."
    },
    "warn": {
      "return type": "void",
      "arguments": [
        "const char *format",
        "…"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "warnx": {
      "return type": "void",
      "arguments": [
        "const char *format",
        "…"
      ],
      "description": "err.h (BSD):  Error Messages."
    },
    "WCOREDUMP": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (BSD):  Process Completion Status."
    },
    "wcpcpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom"
      ],
      "description": "wchar.h (GNU):  Copying and Concatenation."
    },
    "wcpncpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom",
        "size_t size"
      ],
      "description": "wchar.h (GNU):  Copying and Concatenation."
    },
    "wcrtomb": {
      "return type": "size_t",
      "arguments": [
        "char *restrict s",
        "wchar_t wc",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (ISO):  Converting Single Characters."
    },
    "wcscasecmp": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws1",
        "const wchar_t *ws2"
      ],
      "description": "wchar.h (GNU):  String/Array Comparison."
    },
    "wcscat": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wcschr": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *wstring",
        "int wc"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcschrnul": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *wstring",
        "wchar_t wc"
      ],
      "description": "wchar.h (GNU):  Search Functions."
    },
    "wcscmp": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws1",
        "const wchar_t *ws2"
      ],
      "description": "wchar.h (ISO):  String/Array Comparison."
    },
    "wcscoll": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws1",
        "const wchar_t *ws2"
      ],
      "description": "wchar.h (ISO):  Collation Functions."
    },
    "wcscpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wcscspn": {
      "return type": "size_t",
      "arguments": [
        "const wchar_t *wstring",
        "const wchar_t *stopset"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcsdup": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *ws"
      ],
      "description": "wchar.h (GNU):  Copying and Concatenation."
    },
    "wcsftime": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *s",
        "size_t size",
        "const wchar_t *template",
        "const struct tm *brokentime"
      ],
      "description": "time.h (ISO/Amend1):  Formatting Calendar Time."
    },
    "wcslen": {
      "return type": "size_t",
      "arguments": [
        "const wchar_t *ws"
      ],
      "description": "wchar.h (ISO):  String Length."
    },
    "wcsncasecmp": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws1",
        "const wchar_t *s2",
        "size_t n"
      ],
      "description": "wchar.h (GNU):  String/Array Comparison."
    },
    "wcsncat": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wcsncmp": {
      "return type": "int",
      "arguments": [
        "const wchar_t *ws1",
        "const wchar_t *ws2",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  String/Array Comparison."
    },
    "wcsncpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wcsnlen": {
      "return type": "size_t",
      "arguments": [
        "const wchar_t *ws",
        "size_t maxlen"
      ],
      "description": "wchar.h (GNU):  String Length."
    },
    "wcsnrtombs": {
      "return type": "size_t",
      "arguments": [
        "char *restrict dst",
        "const wchar_t **restrict src",
        "size_t nwc",
        "size_t len",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (GNU):  Converting Multibyte and Wide Character Strings."
    },
    "wcspbrk": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *wstring",
        "const wchar_t *stopset"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcsrchr": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *wstring",
        "wchar_t c"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcsrtombs": {
      "return type": "size_t",
      "arguments": [
        "char *restrict dst",
        "const wchar_t **restrict src",
        "size_t len",
        "mbstate_t *restrict ps"
      ],
      "description": "wchar.h (ISO):  Converting Multibyte and Wide Character Strings."
    },
    "wcsspn": {
      "return type": "size_t",
      "arguments": [
        "const wchar_t *wstring",
        "const wchar_t *skipset"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcsstr": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *haystack",
        "const wchar_t *needle"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wcstod": {
      "return type": "double",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr"
      ],
      "description": "wchar.h (ISO):  Parsing of Floats."
    },
    "wcstof": {
      "return type": "float",
      "arguments": [
        "const wchar_t *string",
        "wchar_t **tailptr"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "wcstoimax": {
      "return type": "intmax_t",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstok": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *newstring",
        "const wchar_t *delimiters",
        "wchar_t **save_ptr"
      ],
      "description": "wchar.h (ISO):  Finding Tokens in a String."
    },
    "wcstol": {
      "return type": "long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstold": {
      "return type": "long double",
      "arguments": [
        "const wchar_t *string",
        "wchar_t **tailptr"
      ],
      "description": "stdlib.h (ISO):  Parsing of Floats."
    },
    "wcstoll": {
      "return type": "long long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstombs": {
      "return type": "size_t",
      "arguments": [
        "char *string",
        "const wchar_t *wstring",
        "size_t size"
      ],
      "description": "stdlib.h (ISO):  Non-reentrant Conversion of Strings."
    },
    "wcstoq": {
      "return type": "long long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (GNU):  Parsing of Integers."
    },
    "wcstoul": {
      "return type": "unsigned long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstoull": {
      "return type": "unsigned long long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstoumax": {
      "return type": "uintmax_t",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (ISO):  Parsing of Integers."
    },
    "wcstouq": {
      "return type": "unsigned long long int",
      "arguments": [
        "const wchar_t *restrict string",
        "wchar_t **restrict tailptr",
        "int base"
      ],
      "description": "wchar.h (GNU):  Parsing of Integers."
    },
    "wcswcs": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *haystack",
        "const wchar_t *needle"
      ],
      "description": "wchar.h (XPG):  Search Functions."
    },
    "wcsxfrm": {
      "return type": "size_t",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *wfrom",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Collation Functions."
    },
    "wctob": {
      "return type": "int",
      "arguments": [
        "wint_t c"
      ],
      "description": "wchar.h (ISO):  Converting Single Characters."
    },
    "wctomb": {
      "return type": "int",
      "arguments": [
        "char *string",
        "wchar_t wchar"
      ],
      "description": "stdlib.h (ISO):  Non-reentrant Conversion of Single Characters."
    },
    "wctrans": {
      "return type": "wctrans_t",
      "arguments": [
        "const char *property"
      ],
      "description": "wctype.h (ISO):  Mapping of wide characters.."
    },
    "wctype": {
      "return type": "wctype_t",
      "arguments": [
        "const char *property"
      ],
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "WEXITSTATUS": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "WIFEXITED": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "WIFSIGNALED": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "WIFSTOPPED": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "wmemchr": {
      "return type": "wchar_t *",
      "arguments": [
        "const wchar_t *block",
        "wchar_t wc",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Search Functions."
    },
    "wmemcmp": {
      "return type": "int",
      "arguments": [
        "const wchar_t *a1",
        "const wchar_t *a2",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  String/Array Comparison."
    },
    "wmemcpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wmemmove": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *wto",
        "const wchar_t *wfrom",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wmempcpy": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *restrict wto",
        "const wchar_t *restrict wfrom",
        "size_t size"
      ],
      "description": "wchar.h (GNU):  Copying and Concatenation."
    },
    "wmemset": {
      "return type": "wchar_t *",
      "arguments": [
        "wchar_t *block",
        "wchar_t wc",
        "size_t size"
      ],
      "description": "wchar.h (ISO):  Copying and Concatenation."
    },
    "wordexp": {
      "return type": "int",
      "arguments": [
        "const char *words",
        "wordexp_t *word-vector-ptr",
        "int flags"
      ],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "wordfree": {
      "return type": "void",
      "arguments": [
        "wordexp_t *word-vector-ptr"
      ],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "wprintf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (ISO):  Formatted Output Functions."
    },
    "write": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "const void *buffer",
        "size_t size"
      ],
      "description": "unistd.h (POSIX.1):  Input and Output Primitives."
    },
    "writev": {
      "return type": "ssize_t",
      "arguments": [
        "int filedes",
        "const struct iovec *vector",
        "int count"
      ],
      "description": "sys/uio.h (BSD):  Fast Scatter-Gather I/O."
    },
    "wscanf": {
      "return type": "int",
      "arguments": [
        "const wchar_t *template",
        "…"
      ],
      "description": "wchar.h (ISO):  Formatted Input Functions."
    },
    "WSTOPSIG": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "WTERMSIG": {
      "return type": "int",
      "arguments": [
        "int status"
      ],
      "description": "sys/wait.h (POSIX.1):  Process Completion Status."
    },
    "y0": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "y0f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "y0l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "y1": {
      "return type": "double",
      "arguments": [
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "y1f": {
      "return type": "float",
      "arguments": [
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "y1l": {
      "return type": "long double",
      "arguments": [
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "yn": {
      "return type": "double",
      "arguments": [
        "int n",
        "double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "ynf": {
      "return type": "float",
      "arguments": [
        "int n",
        "float x"
      ],
      "description": "math.h (SVID):  Special Functions."
    },
    "ynl": {
      "return type": "long double",
      "arguments": [
        "int n",
        "long double x"
      ],
      "description": "math.h (SVID):  Special Functions."
    }
  },
  "static variables": {
    "ALTWERASE": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "ARG_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "argp_err_exit_status": {
      "type": "error_t",
      "description": "argp.h (GNU):  Argp Global Variables."
    },
    "ARGP_ERR_UNKNOWN": {
      "type": "int",
      "description": "argp.h (GNU):  Argp Parser Functions."
    },
    "argp_program_bug_address": {
      "type": "const char",
      "description": "argp.h (GNU):  Argp Global Variables."
    },
    "argp_program_version": {
      "type": "const char",
      "description": "argp.h (GNU):  Argp Global Variables."
    },
    "argp_program_version_hook": {
      "type": "",
      "description": "argp.h (GNU):  Argp Global Variables."
    },
    "BC_BASE_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "BC_DIM_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "BC_SCALE_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "BC_STRING_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "BRKINT": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "BUFSIZ": {
      "type": "int",
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "CCTS_OFLOW": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Control Modes."
    },
    "CHILD_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "CIGNORE": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Control Modes."
    },
    "CLK_TCK": {
      "type": "int",
      "description": "time.h (POSIX.1):  Processor Time Inquiry."
    },
    "CLOCAL": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CLOCKS_PER_SEC": {
      "type": "int",
      "description": "time.h (ISO):  CPU Time Inquiry."
    },
    "COLL_WEIGHTS_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "CPU_SETSIZE": {
      "type": "int",
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "CREAD": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CRTS_IFLOW": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Control Modes."
    },
    "CS5": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CS6": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CS7": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CS8": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CSIZE": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "CSTOPB": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "daylight": {
      "type": "int",
      "description": "time.h (SVID):  Functions and Variables for Time Zones."
    },
    "E2BIG": {
      "type": "int",
      "description": "errno.h (POSIX.1: Argument list too long):  Error Codes."
    },
    "EACCES": {
      "type": "int",
      "description": "errno.h (POSIX.1: Permission denied):  Error Codes."
    },
    "EADDRINUSE": {
      "type": "int",
      "description": "errno.h (BSD: Address already in use):  Error Codes."
    },
    "EADDRNOTAVAIL": {
      "type": "int",
      "description": "errno.h (BSD: Cannot assign requested address):  Error Codes."
    },
    "EADV": {
      "type": "int",
      "description": "errno.h (Linux???: Advertise error):  Error Codes."
    },
    "EAFNOSUPPORT": {
      "type": "int",
      "description": "errno.h (BSD: Address family not supported by protocol):  Error Codes."
    },
    "EAGAIN": {
      "type": "int",
      "description": "errno.h (POSIX.1: Resource temporarily unavailable):  Error Codes."
    },
    "EALREADY": {
      "type": "int",
      "description": "errno.h (BSD: Operation already in progress):  Error Codes."
    },
    "EAUTH": {
      "type": "int",
      "description": "errno.h (BSD: Authentication error):  Error Codes."
    },
    "EBACKGROUND": {
      "type": "int",
      "description": "errno.h (GNU: Inappropriate operation for background process):  Error Codes."
    },
    "EBADE": {
      "type": "int",
      "description": "errno.h (Linux???: Invalid exchange):  Error Codes."
    },
    "EBADF": {
      "type": "int",
      "description": "errno.h (POSIX.1: Bad file descriptor):  Error Codes."
    },
    "EBADFD": {
      "type": "int",
      "description": "errno.h (Linux???: File descriptor in bad state):  Error Codes."
    },
    "EBADMSG": {
      "type": "int",
      "description": "errno.h (XOPEN: Bad message):  Error Codes."
    },
    "EBADR": {
      "type": "int",
      "description": "errno.h (Linux???: Invalid request descriptor):  Error Codes."
    },
    "EBADRPC": {
      "type": "int",
      "description": "errno.h (BSD: RPC struct is bad):  Error Codes."
    },
    "EBADRQC": {
      "type": "int",
      "description": "errno.h (Linux???: Invalid request code):  Error Codes."
    },
    "EBADSLT": {
      "type": "int",
      "description": "errno.h (Linux???: Invalid slot):  Error Codes."
    },
    "EBFONT": {
      "type": "int",
      "description": "errno.h (Linux???: Bad font file format):  Error Codes."
    },
    "EBUSY": {
      "type": "int",
      "description": "errno.h (POSIX.1: Device or resource busy):  Error Codes."
    },
    "ECANCELED": {
      "type": "int",
      "description": "errno.h (POSIX.1: Operation canceled):  Error Codes."
    },
    "ECHILD": {
      "type": "int",
      "description": "errno.h (POSIX.1: No child processes):  Error Codes."
    },
    "ECHO": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ECHOCTL": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "ECHOE": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ECHOK": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ECHOKE": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "ECHONL": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ECHOPRT": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "ECHRNG": {
      "type": "int",
      "description": "errno.h (Linux???: Channel number out of range):  Error Codes."
    },
    "ECOMM": {
      "type": "int",
      "description": "errno.h (Linux???: Communication error on send):  Error Codes."
    },
    "ECONNABORTED": {
      "type": "int",
      "description": "errno.h (BSD: Software caused connection abort):  Error Codes."
    },
    "ECONNREFUSED": {
      "type": "int",
      "description": "errno.h (BSD: Connection refused):  Error Codes."
    },
    "ECONNRESET": {
      "type": "int",
      "description": "errno.h (BSD: Connection reset by peer):  Error Codes."
    },
    "ED": {
      "type": "int",
      "description": "errno.h (GNU: ?):  Error Codes."
    },
    "EDEADLK": {
      "type": "int",
      "description": "errno.h (POSIX.1: Resource deadlock avoided):  Error Codes."
    },
    "EDEADLOCK": {
      "type": "int",
      "description": "errno.h (Linux???: File locking deadlock error):  Error Codes."
    },
    "EDESTADDRREQ": {
      "type": "int",
      "description": "errno.h (BSD: Destination address required):  Error Codes."
    },
    "EDIED": {
      "type": "int",
      "description": "errno.h (GNU: Translator died):  Error Codes."
    },
    "EDOM": {
      "type": "int",
      "description": "errno.h (ISO: Numerical argument out of domain):  Error Codes."
    },
    "EDOTDOT": {
      "type": "int",
      "description": "errno.h (Linux???: RFS specific error):  Error Codes."
    },
    "EDQUOT": {
      "type": "int",
      "description": "errno.h (BSD: Disk quota exceeded):  Error Codes."
    },
    "EEXIST": {
      "type": "int",
      "description": "errno.h (POSIX.1: File exists):  Error Codes."
    },
    "EFAULT": {
      "type": "int",
      "description": "errno.h (POSIX.1: Bad address):  Error Codes."
    },
    "EFBIG": {
      "type": "int",
      "description": "errno.h (POSIX.1: File too large):  Error Codes."
    },
    "EFTYPE": {
      "type": "int",
      "description": "errno.h (BSD: Inappropriate file type or format):  Error Codes."
    },
    "EGRATUITOUS": {
      "type": "int",
      "description": "errno.h (GNU: Gratuitous error):  Error Codes."
    },
    "EGREGIOUS": {
      "type": "int",
      "description": "errno.h (GNU: You really blew it this time):  Error Codes."
    },
    "EHOSTDOWN": {
      "type": "int",
      "description": "errno.h (BSD: Host is down):  Error Codes."
    },
    "EHOSTUNREACH": {
      "type": "int",
      "description": "errno.h (BSD: No route to host):  Error Codes."
    },
    "EHWPOISON": {
      "type": "int",
      "description": "errno.h (Linux: Memory page has hardware error):  Error Codes."
    },
    "EIDRM": {
      "type": "int",
      "description": "errno.h (XOPEN: Identifier removed):  Error Codes."
    },
    "EIEIO": {
      "type": "int",
      "description": "errno.h (GNU: Computer bought the farm):  Error Codes."
    },
    "EILSEQ": {
      "type": "int",
      "description": "errno.h (ISO: Invalid or incomplete multibyte or wide character):  Error Codes."
    },
    "EINPROGRESS": {
      "type": "int",
      "description": "errno.h (BSD: Operation now in progress):  Error Codes."
    },
    "EINTR": {
      "type": "int",
      "description": "errno.h (POSIX.1: Interrupted system call):  Error Codes."
    },
    "EINVAL": {
      "type": "int",
      "description": "errno.h (POSIX.1: Invalid argument):  Error Codes."
    },
    "EIO": {
      "type": "int",
      "description": "errno.h (POSIX.1: Input/output error):  Error Codes."
    },
    "EISCONN": {
      "type": "int",
      "description": "errno.h (BSD: Transport endpoint is already connected):  Error Codes."
    },
    "EISDIR": {
      "type": "int",
      "description": "errno.h (POSIX.1: Is a directory):  Error Codes."
    },
    "EISNAM": {
      "type": "int",
      "description": "errno.h (Linux???: Is a named type file):  Error Codes."
    },
    "EKEYEXPIRED": {
      "type": "int",
      "description": "errno.h (Linux: Key has expired):  Error Codes."
    },
    "EKEYREJECTED": {
      "type": "int",
      "description": "errno.h (Linux: Key was rejected by service):  Error Codes."
    },
    "EKEYREVOKED": {
      "type": "int",
      "description": "errno.h (Linux: Key has been revoked):  Error Codes."
    },
    "EL2HLT": {
      "type": "int",
      "description": "errno.h (Obsolete: Level 2 halted):  Error Codes."
    },
    "EL2NSYNC": {
      "type": "int",
      "description": "errno.h (Obsolete: Level 2 not synchronized):  Error Codes."
    },
    "EL3HLT": {
      "type": "int",
      "description": "errno.h (Obsolete: Level 3 halted):  Error Codes."
    },
    "EL3RST": {
      "type": "int",
      "description": "errno.h (Obsolete: Level 3 reset):  Error Codes."
    },
    "ELIBACC": {
      "type": "int",
      "description": "errno.h (Linux???: Can not access a needed shared library):  Error Codes."
    },
    "ELIBBAD": {
      "type": "int",
      "description": "errno.h (Linux???: Accessing a corrupted shared library):  Error Codes."
    },
    "ELIBEXEC": {
      "type": "int",
      "description": "errno.h (Linux???: Cannot exec a shared library directly):  Error Codes."
    },
    "ELIBMAX": {
      "type": "int",
      "description": "errno.h (Linux???: Attempting to link in too many shared libraries):  Error Codes."
    },
    "ELIBSCN": {
      "type": "int",
      "description": "errno.h (Linux???: .lib section in a.out corrupted):  Error Codes."
    },
    "ELNRNG": {
      "type": "int",
      "description": "errno.h (Linux???: Link number out of range):  Error Codes."
    },
    "ELOOP": {
      "type": "int",
      "description": "errno.h (BSD: Too many levels of symbolic links):  Error Codes."
    },
    "EMEDIUMTYPE": {
      "type": "int",
      "description": "errno.h (Linux???: Wrong medium type):  Error Codes."
    },
    "EMFILE": {
      "type": "int",
      "description": "errno.h (POSIX.1: Too many open files):  Error Codes."
    },
    "EMLINK": {
      "type": "int",
      "description": "errno.h (POSIX.1: Too many links):  Error Codes."
    },
    "EMSGSIZE": {
      "type": "int",
      "description": "errno.h (BSD: Message too long):  Error Codes."
    },
    "EMULTIHOP": {
      "type": "int",
      "description": "errno.h (XOPEN: Multihop attempted):  Error Codes."
    },
    "ENAMETOOLONG": {
      "type": "int",
      "description": "errno.h (POSIX.1: File name too long):  Error Codes."
    },
    "ENAVAIL": {
      "type": "int",
      "description": "errno.h (Linux???: No XENIX semaphores available):  Error Codes."
    },
    "ENEEDAUTH": {
      "type": "int",
      "description": "errno.h (BSD: Need authenticator):  Error Codes."
    },
    "ENETDOWN": {
      "type": "int",
      "description": "errno.h (BSD: Network is down):  Error Codes."
    },
    "ENETRESET": {
      "type": "int",
      "description": "errno.h (BSD: Network dropped connection on reset):  Error Codes."
    },
    "ENETUNREACH": {
      "type": "int",
      "description": "errno.h (BSD: Network is unreachable):  Error Codes."
    },
    "ENFILE": {
      "type": "int",
      "description": "errno.h (POSIX.1: Too many open files in system):  Error Codes."
    },
    "ENOANO": {
      "type": "int",
      "description": "errno.h (Linux???: No anode):  Error Codes."
    },
    "ENOBUFS": {
      "type": "int",
      "description": "errno.h (BSD: No buffer space available):  Error Codes."
    },
    "ENOCSI": {
      "type": "int",
      "description": "errno.h (Linux???: No CSI structure available):  Error Codes."
    },
    "ENODATA": {
      "type": "int",
      "description": "errno.h (XOPEN: No data available):  Error Codes."
    },
    "ENODEV": {
      "type": "int",
      "description": "errno.h (POSIX.1: No such device):  Error Codes."
    },
    "ENOENT": {
      "type": "int",
      "description": "errno.h (POSIX.1: No such file or directory):  Error Codes."
    },
    "ENOEXEC": {
      "type": "int",
      "description": "errno.h (POSIX.1: Exec format error):  Error Codes."
    },
    "ENOKEY": {
      "type": "int",
      "description": "errno.h (Linux: Required key not available):  Error Codes."
    },
    "ENOLCK": {
      "type": "int",
      "description": "errno.h (POSIX.1: No locks available):  Error Codes."
    },
    "ENOLINK": {
      "type": "int",
      "description": "errno.h (XOPEN: Link has been severed):  Error Codes."
    },
    "ENOMEDIUM": {
      "type": "int",
      "description": "errno.h (Linux???: No medium found):  Error Codes."
    },
    "ENOMEM": {
      "type": "int",
      "description": "errno.h (POSIX.1: Cannot allocate memory):  Error Codes."
    },
    "ENOMSG": {
      "type": "int",
      "description": "errno.h (XOPEN: No message of desired type):  Error Codes."
    },
    "ENONET": {
      "type": "int",
      "description": "errno.h (Linux???: Machine is not on the network):  Error Codes."
    },
    "ENOPKG": {
      "type": "int",
      "description": "errno.h (Linux???: Package not installed):  Error Codes."
    },
    "ENOPROTOOPT": {
      "type": "int",
      "description": "errno.h (BSD: Protocol not available):  Error Codes."
    },
    "ENOSPC": {
      "type": "int",
      "description": "errno.h (POSIX.1: No space left on device):  Error Codes."
    },
    "ENOSR": {
      "type": "int",
      "description": "errno.h (XOPEN: Out of streams resources):  Error Codes."
    },
    "ENOSTR": {
      "type": "int",
      "description": "errno.h (XOPEN: Device not a stream):  Error Codes."
    },
    "ENOSYS": {
      "type": "int",
      "description": "errno.h (POSIX.1: Function not implemented):  Error Codes."
    },
    "ENOTBLK": {
      "type": "int",
      "description": "errno.h (BSD: Block device required):  Error Codes."
    },
    "ENOTCONN": {
      "type": "int",
      "description": "errno.h (BSD: Transport endpoint is not connected):  Error Codes."
    },
    "ENOTDIR": {
      "type": "int",
      "description": "errno.h (POSIX.1: Not a directory):  Error Codes."
    },
    "ENOTEMPTY": {
      "type": "int",
      "description": "errno.h (POSIX.1: Directory not empty):  Error Codes."
    },
    "ENOTNAM": {
      "type": "int",
      "description": "errno.h (Linux???: Not a XENIX named type file):  Error Codes."
    },
    "ENOTRECOVERABLE": {
      "type": "int",
      "description": "errno.h (Linux: State not recoverable):  Error Codes."
    },
    "ENOTSOCK": {
      "type": "int",
      "description": "errno.h (BSD: Socket operation on non-socket):  Error Codes."
    },
    "ENOTSUP": {
      "type": "int",
      "description": "errno.h (POSIX.1: Not supported):  Error Codes."
    },
    "ENOTTY": {
      "type": "int",
      "description": "errno.h (POSIX.1: Inappropriate ioctl for device):  Error Codes."
    },
    "ENOTUNIQ": {
      "type": "int",
      "description": "errno.h (Linux???: Name not unique on network):  Error Codes."
    },
    "environ": {
      "type": "char",
      "description": "unistd.h (POSIX.1):  Environment Access."
    },
    "ENXIO": {
      "type": "int",
      "description": "errno.h (POSIX.1: No such device or address):  Error Codes."
    },
    "EOF": {
      "type": "int",
      "description": "stdio.h (ISO):  End-Of-File and Errors."
    },
    "EOPNOTSUPP": {
      "type": "int",
      "description": "errno.h (BSD: Operation not supported):  Error Codes."
    },
    "EOVERFLOW": {
      "type": "int",
      "description": "errno.h (XOPEN: Value too large for defined data type):  Error Codes."
    },
    "EOWNERDEAD": {
      "type": "int",
      "description": "errno.h (Linux: Owner died):  Error Codes."
    },
    "EPERM": {
      "type": "int",
      "description": "errno.h (POSIX.1: Operation not permitted):  Error Codes."
    },
    "EPFNOSUPPORT": {
      "type": "int",
      "description": "errno.h (BSD: Protocol family not supported):  Error Codes."
    },
    "EPIPE": {
      "type": "int",
      "description": "errno.h (POSIX.1: Broken pipe):  Error Codes."
    },
    "EPROCLIM": {
      "type": "int",
      "description": "errno.h (BSD: Too many processes):  Error Codes."
    },
    "EPROCUNAVAIL": {
      "type": "int",
      "description": "errno.h (BSD: RPC bad procedure for program):  Error Codes."
    },
    "EPROGMISMATCH": {
      "type": "int",
      "description": "errno.h (BSD: RPC program version wrong):  Error Codes."
    },
    "EPROGUNAVAIL": {
      "type": "int",
      "description": "errno.h (BSD: RPC program not available):  Error Codes."
    },
    "EPROTO": {
      "type": "int",
      "description": "errno.h (XOPEN: Protocol error):  Error Codes."
    },
    "EPROTONOSUPPORT": {
      "type": "int",
      "description": "errno.h (BSD: Protocol not supported):  Error Codes."
    },
    "EPROTOTYPE": {
      "type": "int",
      "description": "errno.h (BSD: Protocol wrong type for socket):  Error Codes."
    },
    "EQUIV_CLASS_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "ERANGE": {
      "type": "int",
      "description": "errno.h (ISO: Numerical result out of range):  Error Codes."
    },
    "EREMCHG": {
      "type": "int",
      "description": "errno.h (Linux???: Remote address changed):  Error Codes."
    },
    "EREMOTE": {
      "type": "int",
      "description": "errno.h (BSD: Object is remote):  Error Codes."
    },
    "EREMOTEIO": {
      "type": "int",
      "description": "errno.h (Linux???: Remote I/O error):  Error Codes."
    },
    "ERESTART": {
      "type": "int",
      "description": "errno.h (Linux???: Interrupted system call should be restarted):  Error Codes."
    },
    "ERFKILL": {
      "type": "int",
      "description": "errno.h (Linux: Operation not possible due to RF-kill):  Error Codes."
    },
    "EROFS": {
      "type": "int",
      "description": "errno.h (POSIX.1: Read-only file system):  Error Codes."
    },
    "ERPCMISMATCH": {
      "type": "int",
      "description": "errno.h (BSD: RPC version wrong):  Error Codes."
    },
    "errno": {
      "type": "volatile int",
      "description": "errno.h (ISO):  Checking for Errors."
    },
    "error_message_count": {
      "type": "unsigned int",
      "description": "error.h (GNU):  Error Messages."
    },
    "error_one_per_line": {
      "type": "int",
      "description": "error.h (GNU):  Error Messages."
    },
    "ESHUTDOWN": {
      "type": "int",
      "description": "errno.h (BSD: Cannot send after transport endpoint shutdown):  Error Codes."
    },
    "ESOCKTNOSUPPORT": {
      "type": "int",
      "description": "errno.h (BSD: Socket type not supported):  Error Codes."
    },
    "ESPIPE": {
      "type": "int",
      "description": "errno.h (POSIX.1: Illegal seek):  Error Codes."
    },
    "ESRCH": {
      "type": "int",
      "description": "errno.h (POSIX.1: No such process):  Error Codes."
    },
    "ESRMNT": {
      "type": "int",
      "description": "errno.h (Linux???: Srmount error):  Error Codes."
    },
    "ESTALE": {
      "type": "int",
      "description": "errno.h (BSD: Stale file handle):  Error Codes."
    },
    "ESTRPIPE": {
      "type": "int",
      "description": "errno.h (Linux???: Streams pipe error):  Error Codes."
    },
    "ETIME": {
      "type": "int",
      "description": "errno.h (XOPEN: Timer expired):  Error Codes."
    },
    "ETIMEDOUT": {
      "type": "int",
      "description": "errno.h (BSD: Connection timed out):  Error Codes."
    },
    "ETOOMANYREFS": {
      "type": "int",
      "description": "errno.h (BSD: Too many references: cannot splice):  Error Codes."
    },
    "ETXTBSY": {
      "type": "int",
      "description": "errno.h (BSD: Text file busy):  Error Codes."
    },
    "EUCLEAN": {
      "type": "int",
      "description": "errno.h (Linux???: Structure needs cleaning):  Error Codes."
    },
    "EUNATCH": {
      "type": "int",
      "description": "errno.h (Linux???: Protocol driver not attached):  Error Codes."
    },
    "EUSERS": {
      "type": "int",
      "description": "errno.h (BSD: Too many users):  Error Codes."
    },
    "EWOULDBLOCK": {
      "type": "int",
      "description": "errno.h (BSD: Operation would block):  Error Codes."
    },
    "EXDEV": {
      "type": "int",
      "description": "errno.h (POSIX.1: Invalid cross-device link):  Error Codes."
    },
    "EXFULL": {
      "type": "int",
      "description": "errno.h (Linux???: Exchange full):  Error Codes."
    },
    "EXIT_FAILURE": {
      "type": "int",
      "description": "stdlib.h (ISO):  Exit Status."
    },
    "EXIT_SUCCESS": {
      "type": "int",
      "description": "stdlib.h (ISO):  Exit Status."
    },
    "EXPR_NEST_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "FD_CLOEXEC": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Descriptor Flags."
    },
    "FD_SETSIZE": {
      "type": "int",
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "F_DUPFD": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Duplicating Descriptors."
    },
    "F_GETFD": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Descriptor Flags."
    },
    "F_GETFL": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Getting and Setting File Status Flags."
    },
    "F_GETLK": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "F_GETOWN": {
      "type": "int",
      "description": "fcntl.h (BSD):  Interrupt-Driven Input."
    },
    "FILENAME_MAX": {
      "type": "int",
      "description": "stdio.h (ISO):  Limits on File System Capacity."
    },
    "FLUSHO": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "F_OFD_SETLK": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open File Description Locks."
    },
    "F_OFD_SETLKW": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open File Description Locks."
    },
    "F_OK": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Testing Permission to Access a File."
    },
    "FOPEN_MAX": {
      "type": "int",
      "description": "stdio.h (ISO):  Opening Streams."
    },
    "FP_ILOGB0": {
      "type": "int",
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "FP_ILOGBNAN": {
      "type": "int",
      "description": "math.h (ISO):  Exponentiation and Logarithms."
    },
    "__free_hook": {
      "type": "",
      "description": "malloc.h (GNU):  Memory Allocation Hooks."
    },
    "F_SETFD": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Descriptor Flags."
    },
    "F_SETFL": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Getting and Setting File Status Flags."
    },
    "F_SETLK": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "F_SETLKW": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "F_SETOWN": {
      "type": "int",
      "description": "fcntl.h (BSD):  Interrupt-Driven Input."
    },
    "HUGE_VAL": {
      "type": "double",
      "description": "math.h (ISO):  Error Reporting by Mathematical Functions."
    },
    "HUGE_VALF": {
      "type": "float",
      "description": "math.h (ISO):  Error Reporting by Mathematical Functions."
    },
    "HUGE_VALL": {
      "type": "long double",
      "description": "math.h (ISO):  Error Reporting by Mathematical Functions."
    },
    "HUPCL": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "ICANON": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ICRNL": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IEXTEN": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "IFNAMSIZ": {
      "type": "size_t",
      "description": "net/if.h (net/if.h):  Interface Naming."
    },
    "IGNBRK": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IGNCR": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IGNPAR": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IMAXBEL": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Input Modes."
    },
    "in6addr_any": {
      "type": "struct in6_addr",
      "description": "netinet/in.h (IPv6 basic API):  Host Address Data Type."
    },
    "in6addr_loopback": {
      "type": "struct in6_addr",
      "description": "netinet/in.h (IPv6 basic API):  Host Address Data Type."
    },
    "INADDR_ANY": {
      "type": "uint32_t",
      "description": "netinet/in.h (BSD):  Host Address Data Type."
    },
    "INADDR_BROADCAST": {
      "type": "uint32_t",
      "description": "netinet/in.h (BSD):  Host Address Data Type."
    },
    "INADDR_LOOPBACK": {
      "type": "uint32_t",
      "description": "netinet/in.h (BSD):  Host Address Data Type."
    },
    "INADDR_NONE": {
      "type": "uint32_t",
      "description": "netinet/in.h (BSD):  Host Address Data Type."
    },
    "INFINITY": {
      "type": "float",
      "description": "math.h (ISO):  Infinity and NaN."
    },
    "INLCR": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "INPCK": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "_IOFBF": {
      "type": "int",
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "_IOLBF": {
      "type": "int",
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "_IONBF": {
      "type": "int",
      "description": "stdio.h (ISO):  Controlling Which Kind of Buffering."
    },
    "IPPORT_RESERVED": {
      "type": "int",
      "description": "netinet/in.h (BSD):  Internet Ports."
    },
    "IPPORT_USERRESERVED": {
      "type": "int",
      "description": "netinet/in.h (BSD):  Internet Ports."
    },
    "ISIG": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "ISTRIP": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IXANY": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Input Modes."
    },
    "IXOFF": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "IXON": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "L_ctermid": {
      "type": "int",
      "description": "stdio.h (POSIX.1):  Identifying the Controlling Terminal."
    },
    "L_cuserid": {
      "type": "int",
      "description": "stdio.h (POSIX.1):  Identifying Who Logged In."
    },
    "LINE_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  Utility Program Capacity Limits."
    },
    "LINK_MAX": {
      "type": "int",
      "description": "limits.h, (optional) (POSIX.1):  Limits on File System Capacity."
    },
    "L_tmpnam": {
      "type": "int",
      "description": "stdio.h (ISO):  Temporary Files."
    },
    "__malloc_hook": {
      "type": "",
      "description": "malloc.h (GNU):  Memory Allocation Hooks."
    },
    "__malloc_initialize_hook": {
      "type": "",
      "description": "malloc.h (GNU):  Memory Allocation Hooks."
    },
    "MAX_CANON": {
      "type": "int",
      "description": "limits.h (POSIX.1):  Limits on File System Capacity."
    },
    "MAX_INPUT": {
      "type": "int",
      "description": "limits.h (POSIX.1):  Limits on File System Capacity."
    },
    "MAXNAMLEN": {
      "type": "int",
      "description": "dirent.h (BSD):  Limits on File System Capacity."
    },
    "MAXSYMLINKS": {
      "type": "int",
      "description": "sys/param.h (BSD):  Symbolic Links."
    },
    "MB_CUR_MAX": {
      "type": "int",
      "description": "stdlib.h (ISO):  Selecting the conversion and its properties."
    },
    "MB_LEN_MAX": {
      "type": "int",
      "description": "limits.h (ISO):  Selecting the conversion and its properties."
    },
    "MDMBUF": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Control Modes."
    },
    "__memalign_hook": {
      "type": "",
      "description": "malloc.h (GNU):  Memory Allocation Hooks."
    },
    "MSG_DONTROUTE": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Socket Data Options."
    },
    "MSG_OOB": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Socket Data Options."
    },
    "MSG_PEEK": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Socket Data Options."
    },
    "NAME_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  Limits on File System Capacity."
    },
    "NAN": {
      "type": "float",
      "description": "math.h (GNU):  Infinity and NaN."
    },
    "NCCS": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Terminal Mode Data Types."
    },
    "NGROUPS_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "NOFLSH": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "NOKERNINFO": {
      "type": "tcflag_t",
      "description": "termios.h, (optional) (BSD):  Local Modes."
    },
    "NSIG": {
      "type": "int",
      "description": "signal.h (BSD):  Standard Signals."
    },
    "NULL": {
      "type": "void",
      "description": "stddef.h (ISO):  Null Pointer Constant."
    },
    "O_ACCMODE": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Access Modes."
    },
    "O_APPEND": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  I/O Operating Modes."
    },
    "O_ASYNC": {
      "type": "int",
      "description": "fcntl.h (BSD):  I/O Operating Modes."
    },
    "obstack_alloc_failed_handler": {
      "type": "",
      "description": "obstack.h (GNU):  Preparing for Using Obstacks."
    },
    "O_CREAT": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open-time Flags."
    },
    "O_EXCL": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open-time Flags."
    },
    "O_EXEC": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  File Access Modes."
    },
    "O_EXLOCK": {
      "type": "int",
      "description": "fcntl.h, (optional) (BSD):  Open-time Flags."
    },
    "O_FSYNC": {
      "type": "int",
      "description": "fcntl.h (BSD):  I/O Operating Modes."
    },
    "O_IGNORE_CTTY": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  Open-time Flags."
    },
    "O_NDELAY": {
      "type": "int",
      "description": "fcntl.h (BSD):  I/O Operating Modes."
    },
    "ONLCR": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Output Modes."
    },
    "O_NOATIME": {
      "type": "int",
      "description": "fcntl.h (GNU):  I/O Operating Modes."
    },
    "O_NOCTTY": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open-time Flags."
    },
    "ONOEOT": {
      "type": "tcflag_t",
      "description": "termios.h, (optional) (BSD):  Output Modes."
    },
    "O_NOLINK": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  Open-time Flags."
    },
    "O_NONBLOCK": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  I/O Operating Modes."
    },
    "O_NOTRANS": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  Open-time Flags."
    },
    "OPEN_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "OPOST": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Output Modes."
    },
    "optarg": {
      "type": "char",
      "description": "unistd.h (POSIX.2):  Using the getopt function."
    },
    "opterr": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Using the getopt function."
    },
    "optind": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Using the getopt function."
    },
    "optopt": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Using the getopt function."
    },
    "O_RDONLY": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Access Modes."
    },
    "O_RDWR": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Access Modes."
    },
    "O_READ": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  File Access Modes."
    },
    "O_SHLOCK": {
      "type": "int",
      "description": "fcntl.h, (optional) (BSD):  Open-time Flags."
    },
    "O_SYNC": {
      "type": "int",
      "description": "fcntl.h (BSD):  I/O Operating Modes."
    },
    "O_TRUNC": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  Open-time Flags."
    },
    "O_WRITE": {
      "type": "int",
      "description": "fcntl.h, (optional) (GNU):  File Access Modes."
    },
    "O_WRONLY": {
      "type": "int",
      "description": "fcntl.h (POSIX.1):  File Access Modes."
    },
    "OXTABS": {
      "type": "tcflag_t",
      "description": "termios.h, (optional) (BSD):  Output Modes."
    },
    "PA_FLAG_MASK": {
      "type": "int",
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PARENB": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "PARMRK": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Input Modes."
    },
    "PARODD": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Control Modes."
    },
    "PATH_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  Limits on File System Capacity."
    },
    "PENDIN": {
      "type": "tcflag_t",
      "description": "termios.h (BSD):  Local Modes."
    },
    "PF_FILE": {
      "type": "int",
      "description": "sys/socket.h (GNU):  Details of Local Namespace."
    },
    "PF_INET": {
      "type": "int",
      "description": "sys/socket.h (BSD):  The Internet Namespace."
    },
    "PF_INET6": {
      "type": "int",
      "description": "sys/socket.h (X/Open):  The Internet Namespace."
    },
    "PF_LOCAL": {
      "type": "int",
      "description": "sys/socket.h (POSIX):  Details of Local Namespace."
    },
    "PF_UNIX": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Details of Local Namespace."
    },
    "PIPE_BUF": {
      "type": "int",
      "description": "limits.h (POSIX.1):  Limits on File System Capacity."
    },
    "_POSIX2_C_DEV": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Overall System Options."
    },
    "_POSIX2_C_VERSION": {
      "type": "long int",
      "description": "unistd.h (POSIX.2):  Which Version of POSIX is Supported."
    },
    "_POSIX2_FORT_DEV": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Overall System Options."
    },
    "_POSIX2_FORT_RUN": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Overall System Options."
    },
    "_POSIX2_LOCALEDEF": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Overall System Options."
    },
    "_POSIX2_SW_DEV": {
      "type": "int",
      "description": "unistd.h (POSIX.2):  Overall System Options."
    },
    "_POSIX_CHOWN_RESTRICTED": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Optional Features in File Support."
    },
    "_POSIX_JOB_CONTROL": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Overall System Options."
    },
    "_POSIX_NO_TRUNC": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Optional Features in File Support."
    },
    "_POSIX_SAVED_IDS": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Overall System Options."
    },
    "_POSIX_VDISABLE": {
      "type": "unsigned char",
      "description": "unistd.h (POSIX.1):  Optional Features in File Support."
    },
    "_POSIX_VERSION": {
      "type": "long int",
      "description": "unistd.h (POSIX.1):  Which Version of POSIX is Supported."
    },
    "program_invocation_name": {
      "type": "char",
      "description": "errno.h (GNU):  Error Messages."
    },
    "program_invocation_short_name": {
      "type": "char",
      "description": "errno.h (GNU):  Error Messages."
    },
    "P_tmpdir": {
      "type": "char",
      "description": "stdio.h (SVID):  Temporary Files."
    },
    "RAND_MAX": {
      "type": "int",
      "description": "stdlib.h (ISO):  ISO C Random Number Functions."
    },
    "__realloc_hook": {
      "type": "",
      "description": "malloc.h (GNU):  Memory Allocation Hooks."
    },
    "RE_DUP_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.2):  General Capacity Limits."
    },
    "RLIM_INFINITY": {
      "type": "rlim_t",
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "R_OK": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Testing Permission to Access a File."
    },
    "SA_NOCLDSTOP": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Flags for sigaction."
    },
    "SA_ONSTACK": {
      "type": "int",
      "description": "signal.h (BSD):  Flags for sigaction."
    },
    "SA_RESTART": {
      "type": "int",
      "description": "signal.h (BSD):  Flags for sigaction."
    },
    "SEEK_CUR": {
      "type": "int",
      "description": "stdio.h (ISO):  File Positioning."
    },
    "SEEK_END": {
      "type": "int",
      "description": "stdio.h (ISO):  File Positioning."
    },
    "SEEK_SET": {
      "type": "int",
      "description": "stdio.h (ISO):  File Positioning."
    },
    "S_IFMT": {
      "type": "int",
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "SIGABRT": {
      "type": "int",
      "description": "signal.h (ISO):  Program Error Signals."
    },
    "SIGALRM": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Alarm Signals."
    },
    "SIGBUS": {
      "type": "int",
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "SIGCHLD": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGCLD": {
      "type": "int",
      "description": "signal.h (SVID):  Job Control Signals."
    },
    "SIGCONT": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGEMT": {
      "type": "int",
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "SIG_ERR": {
      "type": "sighandler_t",
      "description": "signal.h (ISO):  Basic Signal Handling."
    },
    "SIGFPE": {
      "type": "int",
      "description": "signal.h (ISO):  Program Error Signals."
    },
    "SIGHUP": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Termination Signals."
    },
    "SIGILL": {
      "type": "int",
      "description": "signal.h (ISO):  Program Error Signals."
    },
    "SIGINFO": {
      "type": "int",
      "description": "signal.h (BSD):  Miscellaneous Signals."
    },
    "SIGINT": {
      "type": "int",
      "description": "signal.h (ISO):  Termination Signals."
    },
    "SIGIO": {
      "type": "int",
      "description": "signal.h (BSD):  Asynchronous I/O Signals."
    },
    "SIGIOT": {
      "type": "int",
      "description": "signal.h (Unix):  Program Error Signals."
    },
    "SIGKILL": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Termination Signals."
    },
    "SIGLOST": {
      "type": "int",
      "description": "signal.h (GNU):  Operation Error Signals."
    },
    "SIGPIPE": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Operation Error Signals."
    },
    "SIGPOLL": {
      "type": "int",
      "description": "signal.h (SVID):  Asynchronous I/O Signals."
    },
    "SIGPROF": {
      "type": "int",
      "description": "signal.h (BSD):  Alarm Signals."
    },
    "SIGQUIT": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Termination Signals."
    },
    "SIGSEGV": {
      "type": "int",
      "description": "signal.h (ISO):  Program Error Signals."
    },
    "SIGSTOP": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGSYS": {
      "type": "int",
      "description": "signal.h (Unix):  Program Error Signals."
    },
    "SIGTERM": {
      "type": "int",
      "description": "signal.h (ISO):  Termination Signals."
    },
    "SIGTRAP": {
      "type": "int",
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "SIGTSTP": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGTTIN": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGTTOU": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Job Control Signals."
    },
    "SIGURG": {
      "type": "int",
      "description": "signal.h (BSD):  Asynchronous I/O Signals."
    },
    "SIGUSR1": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Miscellaneous Signals."
    },
    "SIGUSR2": {
      "type": "int",
      "description": "signal.h (POSIX.1):  Miscellaneous Signals."
    },
    "SIGVTALRM": {
      "type": "int",
      "description": "signal.h (BSD):  Alarm Signals."
    },
    "SIGWINCH": {
      "type": "int",
      "description": "signal.h (BSD):  Miscellaneous Signals."
    },
    "SIGXCPU": {
      "type": "int",
      "description": "signal.h (BSD):  Operation Error Signals."
    },
    "SIGXFSZ": {
      "type": "int",
      "description": "signal.h (BSD):  Operation Error Signals."
    },
    "SOCK_DGRAM": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Communication Styles."
    },
    "SOCK_RAW": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Communication Styles."
    },
    "SOCK_RDM": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Communication Styles."
    },
    "SOCK_SEQPACKET": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Communication Styles."
    },
    "SOCK_STREAM": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Communication Styles."
    },
    "SOL_SOCKET": {
      "type": "int",
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SSIZE_MAX": {
      "type": "ssize_t",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "stderr": {
      "type": "FILE",
      "description": "stdio.h (ISO):  Standard Streams."
    },
    "stdin": {
      "type": "FILE",
      "description": "stdio.h (ISO):  Standard Streams."
    },
    "stdout": {
      "type": "FILE",
      "description": "stdio.h (ISO):  Standard Streams."
    },
    "STREAM_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "timezone": {
      "type": "long int",
      "description": "time.h (SVID):  Functions and Variables for Time Zones."
    },
    "TMP_MAX": {
      "type": "int",
      "description": "stdio.h (ISO):  Temporary Files."
    },
    "TOSTOP": {
      "type": "tcflag_t",
      "description": "termios.h (POSIX.1):  Local Modes."
    },
    "2": {
      "type": "char tzname",
      "description": "time.h (POSIX.1):  Functions and Variables for Time Zones."
    },
    "TZNAME_MAX": {
      "type": "int",
      "description": "limits.h (POSIX.1):  General Capacity Limits."
    },
    "wait": {
      "type": "union",
      "description": "sys/wait.h (BSD):  BSD Process Wait Functions."
    },
    "VDISCARD": {
      "type": "int",
      "description": "termios.h (BSD):  Other Special Characters."
    },
    "VDSUSP": {
      "type": "int",
      "description": "termios.h (BSD):  Characters that Cause Signals."
    },
    "VEOF": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters for Input Editing."
    },
    "VEOL": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters for Input Editing."
    },
    "VEOL2": {
      "type": "int",
      "description": "termios.h (BSD):  Characters for Input Editing."
    },
    "VERASE": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters for Input Editing."
    },
    "VINTR": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters that Cause Signals."
    },
    "VKILL": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters for Input Editing."
    },
    "VLNEXT": {
      "type": "int",
      "description": "termios.h (BSD):  Other Special Characters."
    },
    "VMIN": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Noncanonical Input."
    },
    "VQUIT": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters that Cause Signals."
    },
    "VREPRINT": {
      "type": "int",
      "description": "termios.h (BSD):  Characters for Input Editing."
    },
    "VSTART": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Special Characters for Flow Control."
    },
    "VSTATUS": {
      "type": "int",
      "description": "termios.h (BSD):  Other Special Characters."
    },
    "VSTOP": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Special Characters for Flow Control."
    },
    "VSUSP": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Characters that Cause Signals."
    },
    "VTIME": {
      "type": "int",
      "description": "termios.h (POSIX.1):  Noncanonical Input."
    },
    "VWERASE": {
      "type": "int",
      "description": "termios.h (BSD):  Characters for Input Editing."
    },
    "WCHAR_MAX": {
      "type": "wint_t",
      "description": "wchar.h (ISO):  Introduction to Extended Characters."
    },
    "WCHAR_MIN": {
      "type": "wint_t",
      "description": "wchar.h (ISO):  Introduction to Extended Characters."
    },
    "WEOF": {
      "type": "wint_t",
      "description": "wchar.h (ISO):  Introduction to Extended Characters."
    },
    "W_OK": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Testing Permission to Access a File."
    },
    "X_OK": {
      "type": "int",
      "description": "unistd.h (POSIX.1):  Testing Permission to Access a File."
    }
  },
  "types": {
    "blkcnt64_t": {
      "description": "sys/types.h (Unix98):  The meaning of the File Attributes."
    },
    "blkcnt_t": {
      "description": "sys/types.h (Unix98):  The meaning of the File Attributes."
    },
    "cc_t": {
      "description": "termios.h (POSIX.1):  Terminal Mode Data Types."
    },
    "clock_t": {
      "description": "time.h (ISO):  CPU Time Inquiry."
    },
    "cookie_close_function_t": {
      "description": "stdio.h (GNU):  Custom Stream Hook Functions."
    },
    "cookie_io_functions_t": {
      "description": "stdio.h (GNU):  Custom Streams and Cookies."
    },
    "cookie_read_function_t": {
      "description": "stdio.h (GNU):  Custom Stream Hook Functions."
    },
    "cookie_seek_function_t": {
      "description": "stdio.h (GNU):  Custom Stream Hook Functions."
    },
    "cookie_write_function_t": {
      "description": "stdio.h (GNU):  Custom Stream Hook Functions."
    },
    "cpu_set_t": {
      "description": "sched.h (GNU):  Limiting execution to certain CPUs."
    },
    "dev_t": {
      "description": "sys/types.h (POSIX.1):  The meaning of the File Attributes."
    },
    "DIR": {
      "description": "dirent.h (POSIX.1):  Opening a Directory Stream."
    },
    "div_t": {
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "fd_set": {
      "description": "sys/types.h (BSD):  Waiting for Input or Output."
    },
    "FILE": {
      "description": "stdio.h (ISO):  Streams."
    },
    "fpos64_t": {
      "description": "stdio.h (Unix98):  Portable File-Position Functions."
    },
    "fpos_t": {
      "description": "stdio.h (ISO):  Portable File-Position Functions."
    },
    "__ftw64_func_t": {
      "description": "ftw.h (GNU):  Working with Directory Trees."
    },
    "__ftw_func_t": {
      "description": "ftw.h (GNU):  Working with Directory Trees."
    },
    "getdate_err": {
      "description": "time.h (Unix98):  A More User-friendly Way to Parse Times and Dates."
    },
    "gid_t": {
      "description": "sys/types.h (POSIX.1):  Reading the Persona of a Process."
    },
    "glob64_t": {
      "description": "glob.h (GNU):  Calling glob."
    },
    "glob_t": {
      "description": "glob.h (POSIX.2):  Calling glob."
    },
    "iconv_t": {
      "description": "iconv.h (XPG2):  Generic Character Set Conversion Interface."
    },
    "imaxdiv_t": {
      "description": "inttypes.h (ISO):  Integer Division."
    },
    "ino64_t": {
      "description": "sys/types.h (Unix98):  The meaning of the File Attributes."
    },
    "ino_t": {
      "description": "sys/types.h (POSIX.1):  The meaning of the File Attributes."
    },
    "jmp_buf": {
      "description": "setjmp.h (ISO):  Details of Non-Local Exits."
    },
    "ldiv_t": {
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "lldiv_t": {
      "description": "stdlib.h (ISO):  Integer Division."
    },
    "mbstate_t": {
      "description": "wchar.h (ISO):  Representing the state of the conversion."
    },
    "mode_t": {
      "description": "sys/types.h (POSIX.1):  The meaning of the File Attributes."
    },
    "__nftw64_func_t": {
      "description": "ftw.h (GNU):  Working with Directory Trees."
    },
    "__nftw_func_t": {
      "description": "ftw.h (GNU):  Working with Directory Trees."
    },
    "nlink_t": {
      "description": "sys/types.h (POSIX.1):  The meaning of the File Attributes."
    },
    "off64_t": {
      "description": "sys/types.h (Unix98):  Setting the File Position of a Descriptor."
    },
    "off_t": {
      "description": "sys/types.h (POSIX.1):  Setting the File Position of a Descriptor."
    },
    "pid_t": {
      "description": "sys/types.h (POSIX.1):  Process Identification."
    },
    "printf_arginfo_function": {
      "description": "printf.h (GNU):  Defining the Output Handler."
    },
    "printf_function": {
      "description": "printf.h (GNU):  Defining the Output Handler."
    },
    "ptrdiff_t": {
      "description": "stddef.h (ISO):  Important Data Types."
    },
    "regex_t": {
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "regmatch_t": {
      "description": "regex.h (POSIX.2):  Match Results with Subexpressions."
    },
    "regoff_t": {
      "description": "regex.h (POSIX.2):  Match Results with Subexpressions."
    },
    "sig_atomic_t": {
      "description": "signal.h (ISO):  Atomic Types."
    },
    "sighandler_t": {
      "description": "signal.h (GNU):  Basic Signal Handling."
    },
    "sigjmp_buf": {
      "description": "setjmp.h (POSIX.1):  Non-Local Exits and Signals."
    },
    "sigset_t": {
      "description": "signal.h (POSIX.1):  Signal Sets."
    },
    "size_t": {
      "description": "stddef.h (ISO):  Important Data Types."
    },
    "speed_t": {
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "ssize_t": {
      "description": "unistd.h (POSIX.1):  Input and Output Primitives."
    },
    "stack_t": {
      "description": "signal.h (XPG):  Using a Separate Signal Stack."
    },
    "struct aiocb": {
      "description": "aio.h (POSIX.1b):  Perform I/O Operations in Parallel."
    },
    "struct aiocb64": {
      "description": "aio.h (POSIX.1b):  Perform I/O Operations in Parallel."
    },
    "struct aioinit": {
      "description": "aio.h (GNU):  How to optimize the AIO implementation."
    },
    "struct argp": {
      "description": "argp.h (GNU):  Specifying Argp Parsers."
    },
    "struct argp_child": {
      "description": "argp.h (GNU):  Combining Multiple Argp Parsers."
    },
    "struct argp_option": {
      "description": "argp.h (GNU):  Specifying Options in an Argp Parser."
    },
    "struct argp_state": {
      "description": "argp.h (GNU):  Argp Parsing State."
    },
    "struct dirent": {
      "description": "dirent.h (POSIX.1):  Format of a Directory Entry."
    },
    "struct exit_status": {
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "struct flock": {
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "struct fstab": {
      "description": "fstab.h (BSD):  The fstab file."
    },
    "struct FTW": {
      "description": "ftw.h (XPG4.2):  Working with Directory Trees."
    },
    "struct __gconv_step": {
      "description": "gconv.h (GNU):  The iconv Implementation in the GNU C Library."
    },
    "struct __gconv_step_data": {
      "description": "gconv.h (GNU):  The iconv Implementation in the GNU C Library."
    },
    "struct group": {
      "description": "grp.h (POSIX.1):  The Data Structure for a Group."
    },
    "struct hostent": {
      "description": "netdb.h (BSD):  Host Names."
    },
    "struct if_nameindex": {
      "description": "net/if.h (IPv6 basic API):  Interface Naming."
    },
    "struct in6_addr": {
      "description": "netinet/in.h (IPv6 basic API):  Host Address Data Type."
    },
    "struct in_addr": {
      "description": "netinet/in.h (BSD):  Host Address Data Type."
    },
    "struct iovec": {
      "description": "sys/uio.h (BSD):  Fast Scatter-Gather I/O."
    },
    "struct itimerval": {
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "struct lconv": {
      "description": "locale.h (ISO):  localeconv: It is portable but …."
    },
    "struct linger": {
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "struct mallinfo": {
      "description": "malloc.h (GNU):  Statistics for Memory Allocation with malloc."
    },
    "struct mntent": {
      "description": "mntent.h (BSD):  The mtab file."
    },
    "struct msghdr": {
      "description": "sys/socket.h (BSD):  Receiving Datagrams."
    },
    "struct netent": {
      "description": "netdb.h (BSD):  Networks Database."
    },
    "struct obstack": {
      "description": "obstack.h (GNU):  Creating Obstacks."
    },
    "struct option": {
      "description": "getopt.h (GNU):  Parsing Long Options with getopt_long."
    },
    "struct passwd": {
      "description": "pwd.h (POSIX.1):  The Data Structure that Describes a User."
    },
    "struct printf_info": {
      "description": "printf.h (GNU):  Conversion Specifier Options."
    },
    "struct protoent": {
      "description": "netdb.h (BSD):  Protocols Database."
    },
    "struct random_data": {
      "description": "stdlib.h (GNU):  BSD Random Number Functions."
    },
    "struct rlimit": {
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "struct rlimit64": {
      "description": "sys/resource.h (Unix98):  Limiting Resource Usage."
    },
    "struct rusage": {
      "description": "sys/resource.h (BSD):  Resource Usage."
    },
    "struct sched_param": {
      "description": "sched.h (POSIX):  Basic Scheduling Functions."
    },
    "struct servent": {
      "description": "netdb.h (BSD):  The Services Database."
    },
    "struct sgttyb": {
      "description": "termios.h (BSD):  BSD Terminal Modes."
    },
    "struct sigaction": {
      "description": "signal.h (POSIX.1):  Advanced Signal Handling."
    },
    "struct sigstack": {
      "description": "signal.h (BSD):  Using a Separate Signal Stack."
    },
    "struct sockaddr": {
      "description": "sys/socket.h (BSD):  Address Formats."
    },
    "struct sockaddr_in": {
      "description": "netinet/in.h (BSD):  Internet Socket Address Formats."
    },
    "struct sockaddr_un": {
      "description": "sys/un.h (BSD):  Details of Local Namespace."
    },
    "struct stat": {
      "description": "sys/stat.h (POSIX.1):  The meaning of the File Attributes."
    },
    "struct stat64": {
      "description": "sys/stat.h (LFS):  The meaning of the File Attributes."
    },
    "struct termios": {
      "description": "termios.h (POSIX.1):  Terminal Mode Data Types."
    },
    "struct timespec": {
      "description": "sys/time.h (POSIX.1):  Elapsed Time."
    },
    "struct timeval": {
      "description": "sys/time.h (BSD):  Elapsed Time."
    },
    "struct timezone": {
      "description": "sys/time.h (BSD):  High-Resolution Calendar."
    },
    "struct tm": {
      "description": "time.h (ISO):  Broken-down Time."
    },
    "struct tms": {
      "description": "sys/times.h (POSIX.1):  Processor Time Inquiry."
    },
    "struct utimbuf": {
      "description": "utime.h (POSIX.1):  File Times."
    },
    "struct utsname": {
      "description": "sys/utsname.h (POSIX.1):  Platform Type Identification."
    },
    "tcflag_t": {
      "description": "termios.h (POSIX.1):  Terminal Mode Data Types."
    },
    "time_t": {
      "description": "time.h (ISO):  Simple Calendar Time."
    },
    "ucontext_t": {
      "description": "ucontext.h (SVID):  Complete Context Control."
    },
    "uid_t": {
      "description": "sys/types.h (POSIX.1):  Reading the Persona of a Process."
    },
    "va_list": {
      "description": "stdarg.h (ISO):  Argument Access Macros."
    },
    "wchar_t": {
      "description": "stddef.h (ISO):  Introduction to Extended Characters."
    },
    "wctrans_t": {
      "description": "wctype.h (ISO):  Mapping of wide characters.."
    },
    "wctype_t": {
      "description": "wctype.h (ISO):  Character class determination for wide characters."
    },
    "wint_t": {
      "description": "wchar.h (ISO):  Introduction to Extended Characters."
    },
    "wordexp_t": {
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    }
  },
  "macros": {
    "ACCOUNTING": {
      "arguments": [],
      "description": "utmp.h (SVID):  Manipulating the User Accounting Database."
    },
    "AF_FILE": {
      "arguments": [],
      "description": "sys/socket.h (GNU):  Address Formats."
    },
    "AF_INET": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Address Formats."
    },
    "AF_INET6": {
      "arguments": [],
      "description": "sys/socket.h (IPv6 Basic API):  Address Formats."
    },
    "AF_LOCAL": {
      "arguments": [],
      "description": "sys/socket.h (POSIX):  Address Formats."
    },
    "AF_UNIX": {
      "arguments": [],
      "description": "sys/socket.h (BSD, Unix98):  Address Formats."
    },
    "AF_UNSPEC": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Address Formats."
    },
    "ARGP_IN_ORDER": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_KEY_ARG": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_ARGS": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_END": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_ERROR": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_FINI": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_HELP_ARGS_DOC": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_HELP_DUP_ARGS_NOTE": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_HELP_EXTRA": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_HELP_HEADER": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_HELP_POST_DOC": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_HELP_PRE_DOC": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Help Filter Functions."
    },
    "ARGP_KEY_INIT": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_NO_ARGS": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_KEY_SUCCESS": {
      "arguments": [],
      "description": "argp.h (GNU):  Special Keys for Argp Parser Functions."
    },
    "ARGP_LONG_ONLY": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_NO_ARGS": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_NO_ERRS": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_NO_EXIT": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_NO_HELP": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_PARSE_ARGV0": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "ARGP_SILENT": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for argp_parse."
    },
    "B0": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B110": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B115200": {
      "arguments": [],
      "description": "termios.h (GNU):  Line Speed."
    },
    "B1200": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B134": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B150": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B1800": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B19200": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B200": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B230400": {
      "arguments": [],
      "description": "termios.h (GNU):  Line Speed."
    },
    "B2400": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B300": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B38400": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B460800": {
      "arguments": [],
      "description": "termios.h (GNU):  Line Speed."
    },
    "B4800": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B50": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B57600": {
      "arguments": [],
      "description": "termios.h (GNU):  Line Speed."
    },
    "B600": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B75": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "B9600": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Line Speed."
    },
    "BOOT_TIME": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "CHAR_BIT": {
      "arguments": [],
      "description": "limits.h (ISO):  Computing the Width of an Integer Data Type."
    },
    "CHAR_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "CHAR_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "_CS_LFS64_CFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS64_LDFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS64_LIBS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS64_LINTFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS_CFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS_LDFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS_LIBS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_LFS_LINTFLAGS": {
      "arguments": [],
      "description": "unistd.h (Unix98):  String-Valued Parameters."
    },
    "_CS_PATH": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  String-Valued Parameters."
    },
    "DBL_DIG": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_EPSILON": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MANT_DIG": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MAX": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MAX_10_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MAX_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MIN": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MIN_10_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DBL_MIN_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "DEAD_PROCESS": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "_DEFAULT_SOURCE": {
      "arguments": [],
      "description": "(GNU):  Feature Test Macros."
    },
    "DES_DECRYPT": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DES_ENCRYPT": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DESERR_BADPARAM": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DESERR_HWERROR": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DESERR_NOHWDEVICE": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DESERR_NONE": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DES_HW": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "DES_SW": {
      "arguments": [],
      "description": "rpc/des_crypt.h (SUNRPC):  DES Encryption."
    },
    "EMPTY": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "FE_DIVBYZERO": {
      "arguments": [],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "FE_DOWNWARD": {
      "arguments": [],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "FE_INEXACT": {
      "arguments": [],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "FE_INVALID": {
      "arguments": [],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "FE_OVERFLOW": {
      "arguments": [],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "FE_TONEAREST": {
      "arguments": [],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "FE_TOWARDZERO": {
      "arguments": [],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "FE_UNDERFLOW": {
      "arguments": [],
      "description": "fenv.h (ISO):  Examining the FPU status word."
    },
    "FE_UPWARD": {
      "arguments": [],
      "description": "fenv.h (ISO):  Rounding Modes."
    },
    "FLT_DIG": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_EPSILON": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MANT_DIG": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MAX": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MAX_10_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MAX_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MIN": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MIN_10_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_MIN_EXP": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_RADIX": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FLT_ROUNDS": {
      "arguments": [],
      "description": "float.h (ISO):  Floating Point Parameters."
    },
    "FNM_CASEFOLD": {
      "arguments": [],
      "description": "fnmatch.h (GNU):  Wildcard Matching."
    },
    "FNM_EXTMATCH": {
      "arguments": [],
      "description": "fnmatch.h (GNU):  Wildcard Matching."
    },
    "FNM_FILE_NAME": {
      "arguments": [],
      "description": "fnmatch.h (GNU):  Wildcard Matching."
    },
    "FNM_LEADING_DIR": {
      "arguments": [],
      "description": "fnmatch.h (GNU):  Wildcard Matching."
    },
    "FNM_NOESCAPE": {
      "arguments": [],
      "description": "fnmatch.h (POSIX.2):  Wildcard Matching."
    },
    "FNM_PATHNAME": {
      "arguments": [],
      "description": "fnmatch.h (POSIX.2):  Wildcard Matching."
    },
    "FNM_PERIOD": {
      "arguments": [],
      "description": "fnmatch.h (POSIX.2):  Wildcard Matching."
    },
    "FPE_DECOVF_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTDIV_FAULT": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTDIV_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTOVF_FAULT": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTOVF_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTUND_FAULT": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_FLTUND_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_INTDIV_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_INTOVF_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "FPE_SUBRNG_TRAP": {
      "arguments": [],
      "description": "signal.h (BSD):  Program Error Signals."
    },
    "F_RDLCK": {
      "arguments": [],
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "F_UNLCK": {
      "arguments": [],
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "F_WRLCK": {
      "arguments": [],
      "description": "fcntl.h (POSIX.1):  File Locks."
    },
    "GLOB_ABORTED": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Calling glob."
    },
    "GLOB_ALTDIRFUNC": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_APPEND": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_BRACE": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_DOOFFS": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_ERR": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_MAGCHAR": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_MARK": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_NOCHECK": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_NOESCAPE": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_NOMAGIC": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_NOMATCH": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Calling glob."
    },
    "GLOB_NOSORT": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Flags for Globbing."
    },
    "GLOB_NOSPACE": {
      "arguments": [],
      "description": "glob.h (POSIX.2):  Calling glob."
    },
    "GLOB_ONLYDIR": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_PERIOD": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_TILDE": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "GLOB_TILDE_CHECK": {
      "arguments": [],
      "description": "glob.h (GNU):  More Flags for Globbing."
    },
    "_GNU_SOURCE": {
      "arguments": [],
      "description": "(GNU):  Feature Test Macros."
    },
    "HOST_NOT_FOUND": {
      "arguments": [],
      "description": "netdb.h (BSD):  Host Names."
    },
    "INIT_PROCESS": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "INT_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "INT_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "_ISOC99_SOURCE": {
      "arguments": [],
      "description": "(GNU):  Feature Test Macros."
    },
    "ITIMER_PROF": {
      "arguments": [],
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "ITIMER_REAL": {
      "arguments": [],
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "ITIMER_VIRTUAL": {
      "arguments": [],
      "description": "sys/time.h (BSD):  Setting an Alarm."
    },
    "LANG": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_ALL": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_COLLATE": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_CTYPE": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_MESSAGES": {
      "arguments": [],
      "description": "locale.h (XOPEN):  Locale Categories."
    },
    "LC_MONETARY": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_NUMERIC": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "LC_TIME": {
      "arguments": [],
      "description": "locale.h (ISO):  Locale Categories."
    },
    "L_INCR": {
      "arguments": [],
      "description": "sys/file.h (BSD):  File Positioning."
    },
    "LLONG_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "LLONG_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "LOGIN_PROCESS": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "LONG_LONG_MAX": {
      "arguments": [],
      "description": "limits.h (GNU):  Range of an Integer Type."
    },
    "LONG_LONG_MIN": {
      "arguments": [],
      "description": "limits.h (GNU):  Range of an Integer Type."
    },
    "LONG_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "LONG_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "L_SET": {
      "arguments": [],
      "description": "sys/file.h (BSD):  File Positioning."
    },
    "L_XTND": {
      "arguments": [],
      "description": "sys/file.h (BSD):  File Positioning."
    },
    "NEW_TIME": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "NO_ADDRESS": {
      "arguments": [],
      "description": "netdb.h (BSD):  Host Names."
    },
    "NO_RECOVERY": {
      "arguments": [],
      "description": "netdb.h (BSD):  Host Names."
    },
    "OLD_TIME": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "OPTION_ALIAS": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for Argp Options."
    },
    "OPTION_ARG_OPTIONAL": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for Argp Options."
    },
    "OPTION_DOC": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for Argp Options."
    },
    "OPTION_HIDDEN": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for Argp Options."
    },
    "OPTION_NO_USAGE": {
      "arguments": [],
      "description": "argp.h (GNU):  Flags for Argp Options."
    },
    "PA_CHAR": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_DOUBLE": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLAG_LONG": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLAG_LONG_DOUBLE": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLAG_LONG_LONG": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLAG_PTR": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLAG_SHORT": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_FLOAT": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_INT": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_LAST": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_POINTER": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "PA_STRING": {
      "arguments": [],
      "description": "printf.h (GNU):  Parsing a Template String."
    },
    "_PC_ASYNC_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_CHOWN_RESTRICTED": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_FILESIZEBITS": {
      "arguments": [],
      "description": "unistd.h (LFS):  Using pathconf."
    },
    "_PC_LINK_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_MAX_CANON": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_MAX_INPUT": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_NAME_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_NO_TRUNC": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_PATH_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_PIPE_BUF": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_PRIO_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_REC_INCR_XFER_SIZE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_REC_MAX_XFER_SIZE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_REC_MIN_XFER_SIZE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_REC_XFER_ALIGN": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_SYNC_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_PC_VDISABLE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Using pathconf."
    },
    "_POSIX2_BC_BASE_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_BC_DIM_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_BC_SCALE_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_BC_STRING_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_COLL_WEIGHTS_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_EQUIV_CLASS_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_EXPR_NEST_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_LINE_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for Utility Limits."
    },
    "_POSIX2_RE_DUP_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.2):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_AIO_LISTIO_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_AIO_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_ARG_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_CHILD_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_C_SOURCE": {
      "arguments": [],
      "description": "(POSIX.2):  Feature Test Macros."
    },
    "_POSIX_LINK_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_MAX_CANON": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_MAX_INPUT": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_NAME_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_NGROUPS_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_OPEN_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_PATH_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_PIPE_BUF": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "POSIX_REC_INCR_XFER_SIZE": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "POSIX_REC_MAX_XFER_SIZE": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "POSIX_REC_MIN_XFER_SIZE": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "POSIX_REC_XFER_ALIGN": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "_POSIX_SOURCE": {
      "arguments": [],
      "description": "(POSIX.1):  Feature Test Macros."
    },
    "_POSIX_SSIZE_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_STREAM_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "_POSIX_TZNAME_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for General Capacity Limits."
    },
    "PRIO_MAX": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Functions For Traditional Scheduling."
    },
    "PRIO_MIN": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Functions For Traditional Scheduling."
    },
    "PRIO_PGRP": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Functions For Traditional Scheduling."
    },
    "PRIO_PROCESS": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Functions For Traditional Scheduling."
    },
    "PRIO_USER": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Functions For Traditional Scheduling."
    },
    "_REENTRANT": {
      "arguments": [],
      "description": "(GNU):  Feature Test Macros."
    },
    "REG_BADBR": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_BADPAT": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_BADRPT": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_EBRACE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_EBRACK": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_ECOLLATE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_ECTYPE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_EESCAPE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_EPAREN": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_ERANGE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_ESPACE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_ESUBREG": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  POSIX Regular Expression Compilation."
    },
    "REG_EXTENDED": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Flags for POSIX Regular Expressions."
    },
    "REG_ICASE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Flags for POSIX Regular Expressions."
    },
    "REG_NEWLINE": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Flags for POSIX Regular Expressions."
    },
    "REG_NOMATCH": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Matching a Compiled POSIX Regular Expression."
    },
    "REG_NOSUB": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Flags for POSIX Regular Expressions."
    },
    "REG_NOTBOL": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Matching a Compiled POSIX Regular Expression."
    },
    "REG_NOTEOL": {
      "arguments": [],
      "description": "regex.h (POSIX.2):  Matching a Compiled POSIX Regular Expression."
    },
    "RLIMIT_AS": {
      "arguments": [],
      "description": "sys/resource.h (Unix98):  Limiting Resource Usage."
    },
    "RLIMIT_CORE": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_CPU": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_DATA": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_FSIZE": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_MEMLOCK": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_NOFILE": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_NPROC": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_RSS": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIMIT_STACK": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RLIM_NLIMITS": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Limiting Resource Usage."
    },
    "RUN_LVL": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "RUSAGE_CHILDREN": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Resource Usage."
    },
    "RUSAGE_SELF": {
      "arguments": [],
      "description": "sys/resource.h (BSD):  Resource Usage."
    },
    "_SC_2_C_DEV": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_2_FORT_DEV": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_2_FORT_RUN": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_2_LOCALEDEF": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_2_SW_DEV": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_2_VERSION": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_AIO_LISTIO_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_AIO_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_AIO_PRIO_DELTA_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_ARG_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_ASYNCHRONOUS_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_ATEXIT_MAX": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_AVPHYS_PAGES": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_BC_BASE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_BC_DIM_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_BC_SCALE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_BC_STRING_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_CHAR_BIT": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_CHARCLASS_NAME_MAX": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_CHAR_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_CHAR_MIN": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_CHILD_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_CLK_TCK": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_COLL_WEIGHTS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_DELAYTIMER_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_EQUIV_CLASS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_EXPR_NEST_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_FSYNC": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_GETGR_R_SIZE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_GETPW_R_SIZE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "SCHAR_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "SCHAR_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "_SC_INT_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_INT_MIN": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_JOB_CONTROL": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_LINE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_LOGIN_NAME_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_LONG_BIT": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_MAPPED_FILES": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MB_LEN_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_MEMLOCK": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MEMLOCK_RANGE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MEMORY_PROTECTION": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MESSAGE_PASSING": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MQ_OPEN_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_MQ_PRIO_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_NGROUPS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_NL_ARGMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NL_LANGMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NL_MSGMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NL_NMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NL_SETMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NL_TEXTMAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_NPROCESSORS_CONF": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_NPROCESSORS_ONLN": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_NZERO": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_OPEN_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_PAGESIZE": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_PHYS_PAGES": {
      "arguments": [],
      "description": "unistd.h (GNU):  Constants for sysconf Parameters."
    },
    "_SC_PII": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_INTERNET": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_INTERNET_DGRAM": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_INTERNET_STREAM": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_OSI": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_OSI_CLTS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_OSI_COTS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_OSI_M": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_SOCKET": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PII_XTI": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_PRIORITIZED_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_PRIORITY_SCHEDULING": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_REALTIME_SIGNALS": {
      "arguments": [],
      "description": "unistdh.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_RTSIG_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SAVED_IDS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SCHAR_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_SCHAR_MIN": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_SELECT": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_SEMAPHORES": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SEM_NSEMS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SEM_VALUE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SHARED_MEMORY_OBJECTS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SHRT_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_SHRT_MIN": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_SIGQUEUE_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "SC_SSIZE_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_STREAM_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_SYNCHRONIZED_IO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_ATTR_STACKADDR": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_ATTR_STACKSIZE": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_DESTRUCTOR_ITERATIONS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_KEYS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_PRIO_INHERIT": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_PRIO_PROTECT": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_PRIORITY_SCHEDULING": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_PROCESS_SHARED": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREADS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_SAFE_FUNCTIONS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_STACK_MIN": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_THREAD_THREADS_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_TIMER_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_TIMERS": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_T_IOV_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_TTY_NAME_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_TZNAME_MAX": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Constants for sysconf Parameters."
    },
    "_SC_UCHAR_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_UINT_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_UIO_MAXIOV": {
      "arguments": [],
      "description": "unistd.h (POSIX.1g):  Constants for sysconf Parameters."
    },
    "_SC_ULONG_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_USHRT_MAX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_VERSION": {
      "arguments": [],
      "description": "unistd.h (POSIX.2):  Constants for sysconf Parameters."
    },
    "_SC_WORD_BIT": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_CRYPT": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_ENH_I18N": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_LEGACY": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_REALTIME": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_REALTIME_THREADS": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_SHM": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_UNIX": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_VERSION": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_XCU_VERSION": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_XPG2": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_XPG3": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "_SC_XOPEN_XPG4": {
      "arguments": [],
      "description": "unistd.h (X/Open):  Constants for sysconf Parameters."
    },
    "SHRT_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "SHRT_MIN": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "S_IEXEC": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  The Mode Bits for Access Permission."
    },
    "S_IFBLK": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFCHR": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFDIR": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFIFO": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFLNK": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFREG": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "S_IFSOCK": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  Testing the Type of a File."
    },
    "SIG_BLOCK": {
      "arguments": [],
      "description": "signal.h (POSIX.1):  Process Signal Mask."
    },
    "SIG_SETMASK": {
      "arguments": [],
      "description": "signal.h (POSIX.1):  Process Signal Mask."
    },
    "SIG_UNBLOCK": {
      "arguments": [],
      "description": "signal.h (POSIX.1):  Process Signal Mask."
    },
    "S_IREAD": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  The Mode Bits for Access Permission."
    },
    "S_IRGRP": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IROTH": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IRUSR": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IRWXG": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IRWXO": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IRWXU": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_ISGID": {
      "arguments": [],
      "description": "sys/stat.h (POSIX):  The Mode Bits for Access Permission."
    },
    "S_ISUID": {
      "arguments": [],
      "description": "sys/stat.h (POSIX):  The Mode Bits for Access Permission."
    },
    "S_ISVTX": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  The Mode Bits for Access Permission."
    },
    "S_IWGRP": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IWOTH": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IWRITE": {
      "arguments": [],
      "description": "sys/stat.h (BSD):  The Mode Bits for Access Permission."
    },
    "S_IWUSR": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IXGRP": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IXOTH": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "S_IXUSR": {
      "arguments": [],
      "description": "sys/stat.h (POSIX.1):  The Mode Bits for Access Permission."
    },
    "SO_BROADCAST": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_DEBUG": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_DONTROUTE": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_ERROR": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_KEEPALIVE": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_LINGER": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_OOBINLINE": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_RCVBUF": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_REUSEADDR": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_SNDBUF": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "SO_STYLE": {
      "arguments": [],
      "description": "sys/socket.h (GNU):  Socket-Level Options."
    },
    "SO_TYPE": {
      "arguments": [],
      "description": "sys/socket.h (BSD):  Socket-Level Options."
    },
    "STDERR_FILENO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Descriptors and Streams."
    },
    "STDIN_FILENO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Descriptors and Streams."
    },
    "STDOUT_FILENO": {
      "arguments": [],
      "description": "unistd.h (POSIX.1):  Descriptors and Streams."
    },
    "SYMLINK_MAX": {
      "arguments": [],
      "description": "limits.h (POSIX.1):  Minimum Values for File System Limits."
    },
    "TCSADRAIN": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Terminal Mode Functions."
    },
    "TCSAFLUSH": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Terminal Mode Functions."
    },
    "TCSANOW": {
      "arguments": [],
      "description": "termios.h (POSIX.1):  Terminal Mode Functions."
    },
    "TCSASOFT": {
      "arguments": [],
      "description": "termios.h (BSD):  Terminal Mode Functions."
    },
    "TRY_AGAIN": {
      "arguments": [],
      "description": "netdb.h (BSD):  Host Names."
    },
    "UCHAR_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "UINT_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "ULLONG_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "ULONG_LONG_MAX": {
      "arguments": [],
      "description": "limits.h (GNU):  Range of an Integer Type."
    },
    "ULONG_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "USER_PROCESS": {
      "arguments": [],
      "description": "utmpx.h (XPG4.2):  XPG User Accounting Database Functions."
    },
    "USHRT_MAX": {
      "arguments": [],
      "description": "limits.h (ISO):  Range of an Integer Type."
    },
    "WCHAR_MAX": {
      "arguments": [],
      "description": "limits.h (GNU):  Range of an Integer Type."
    },
    "WRDE_APPEND": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "WRDE_BADCHAR": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "WRDE_BADVAL": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "WRDE_CMDSUB": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "WRDE_DOOFFS": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "WRDE_NOCMD": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "WRDE_NOSPACE": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "WRDE_REUSE": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "WRDE_SHOWERR": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "WRDE_SYNTAX": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Calling wordexp."
    },
    "WRDE_UNDEF": {
      "arguments": [],
      "description": "wordexp.h (POSIX.2):  Flags for Word Expansion."
    },
    "_XOPEN_SOURCE": {
      "arguments": [],
      "description": "(X/Open):  Feature Test Macros."
    },
    "_XOPEN_SOURCE_EXTENDED": {
      "arguments": [],
      "description": "(X/Open):  Feature Test Macros."
    }
  }
}
